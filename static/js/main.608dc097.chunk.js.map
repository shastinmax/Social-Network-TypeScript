{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/common/Paginator/Paginator.module.css","reportWebVitals.ts","api/api.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/navbar-reducer.tsx","utils/object-helpers.ts","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.ts","components/Dialogs/Dialog/Dialog.tsx","utils/validators/validators.tsx","components/common/FormsControl/FormsControl.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/StyledNavLink/StyledNavLink.tsx","components/Navbar/NavbarContainer.tsx","components/Navbar/Navbar.tsx","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainers.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/common/Paginator/Paginator.tsx","assets/images/risuem-chelovek-rebenku-14.jpg","components/Users/User.tsx","components/Users/Users.tsx","redux/selectors/users-selectors.ts","components/Users/UsersContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/FormsControl/FormsControls.module.css","components/Users/users.module.css","components/Navbar/StyledNavLink/StyledNavLink.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersApi","getUsers","currentPage","pageSize","get","response","data","unfollow","userId","delete","follow","post","getProfile","console","warn","profileApi","getStatus","updateStatus","status","put","authApi","email","password","rememberMe","ADD_POST","setStatus","type","payload","initialState","posts","id","message","likesCount","newPostText","profile","SEND_MESSAGE","dialogs","name","messages","newMessageBody","NAV_BAR","routes","path","title","updateObjectInArray","items","itemId","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPageAC","toggleIsFetchingAC","toggleIsFollowingInProgressAC","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","log","login","isAuth","setAuthUserData","getAuthUserData","initialized","reducers","combineReducers","profilePage","state","action","newPostBody","filter","p","postId","dialogsPage","body","navbar","usersPage","followed","totalCount","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Dialog","props","className","s","dialog","required","value","undefined","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","styles","formControl","Textarea","restProps","child","element","Input","maxLength50","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","mapStateToProps","compose","connect","sendMessage","sendMessageAC","Component","to","dialogsElements","messageElements","Fragment","dialogsItems","values","StyledNavLink","item","isActive","active","NavbarContainer","nav","Preloader","preloader","src","ProfileStatus","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","ProfileInfo","avatar","photos","small","alt","Post","MyPosts","React","memo","myposts","AddNewPostFormRedux","addPost","maxLength10","MyPostsContainer","addPostAC","Profile","ProfileContainer","this","router","params","authorizedUserId","getUserProfile","location","useLocation","navigate","useNavigate","useParams","Header","header","loginBlock","onClick","logoutTC","HeaderContainer","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","User","user","userPhoto","disabled","some","Users","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIComponent","pageNumber","getUsersTC","bind","LoginReduxForm","style","formSummaryError","loginTC","stopSubmit","_error","formData","App","initializeApp","DialogsContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.608dc097.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1_ZQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3rmGo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14JiU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__boplF\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': \"1be3afd1-cb12-4713-953a-273c84cfad9b\"\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object')\r\n        return profileApi.getProfile(userId)\r\n    },\r\n}\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('/profile/status', {status})\r\n    },\r\n}\r\nexport const authApi = {\r\n    getMe() {\r\n        return instance.get('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const getUsers2 = (currentPage: number = 1, pageSize: number = 10) => {\r\n    return instance.get(`follow?page=${currentPage}&count=${pageSize}`,).then(response => response.data)\r\n}\r\n\r\n","import {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\nimport {GlobalTypeAction} from \"./types/typesProfileReducer\";\r\nimport {profileApi, usersApi} from \"../api/api\";\r\n\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST',\r\n    newPostBody: string\r\n}\r\nexport type RouteType = {\r\n    likesCount: number\r\n    message: string\r\n    id: number\r\n}\r\nexport type ProfileType = {\r\n    posts: Array<RouteType>\r\n    newPostText: string,\r\n    profile: null | ProfilePropsType\r\n    status: string\r\n}\r\nexport type DispatchType = (action: GlobalTypeAction) => void\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n\r\nexport const addPostAC = (newPostBody: string): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostBody\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfilePropsType) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile,\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET-STATUS',\r\n        payload: {\r\n            status\r\n        }\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: 'DELETE-POST',\r\n        payload: {\r\n            postId\r\n        }\r\n    } as const\r\n}\r\nexport const getUserProfile = (userId: number) => async (dispatch: DispatchType) => {\r\n    let response = await usersApi.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: DispatchType) => {\r\nlet response = await profileApi.getStatus(userId)\r\n            dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: DispatchType) => {\r\n    let response =await profileApi.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n}\r\n\r\nlet initialState: ProfileType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi,how are you', likesCount: 12},\r\n        {id: 2, message: 'Hi, you', likesCount: 11},\r\n        {id: 3, message: 'Hi,how are you', likesCount: 11},\r\n        {id: 4, message: 'how are you', likesCount: 12}\r\n    ],\r\n    newPostText: 'it-kamas',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfileType = initialState, action: GlobalTypeAction): ProfileType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: 5,\r\n                    message: action.newPostBody,\r\n                    likesCount: 0,\r\n                }],\r\n                newPostText: ''\r\n            }\r\n        case \"SET-USER-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.payload.status\r\n            }\r\n        case \"DELETE-POST\":\r\n            return {\r\n                ...state,posts:state.posts.filter(p => p.id !== action.payload.postId)}\r\n        default:\r\n            return state\r\n    }\r\n}","import {navBarACType} from \"./navbar-reducer\";\r\nimport {AddPostActionType,} from \"./profile-reducer\";\r\n\r\n\r\nexport type UpdateNewMessageBodyActionType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\nexport type SendMessageActionType = {\r\n    type: \"SEND-MESSAGE\",\r\n    newMessageBody: string\r\n\r\n}\r\ntype DialogType = {\r\n    message: string\r\n    id: number\r\n}\r\ntype PostsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type GlobalReducerType =\r\n    AddPostActionType\r\n    | SendMessageActionType\r\n    | navBarACType\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n\r\n})\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<PostsType>\r\n    messages: Array<DialogType>\r\n    newMessageBody: string\r\n\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Slava'},\r\n        {id: 2, name: 'Borya'},\r\n        {id: 3, name: 'Igor'},\r\n        {id: 4, name: 'Viktor'}],\r\n    messages: [\r\n        {id: 1, message: 'Hi Kaktus'},\r\n        {id: 2, message: 'Hi klaus'},\r\n        {id: 3, message: 'Hi Valeron'},\r\n        {id: 4, message: 'Hi hello'},\r\n        {id: 5, message: 'Hi you'}\r\n    ],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: GlobalReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 5, message: body}],\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nimport {GlobalReducerType} from \"./dialogs-reducer\";\r\n\r\nexport type navBarACType={\r\n    type:'NAV-BAR'\r\n}\r\nexport type NavbarRoutesType={\r\n    path:string\r\n    title:string\r\n}\r\nexport type NavBarType = {\r\n    routes:Array<NavbarRoutesType>\r\n}\r\nconst NAV_BAR='NAV-BAR'\r\nexport const navBarAC=():navBarACType=>({\r\n    type:NAV_BAR\r\n})\r\n\r\nlet initialState:NavBarType = {\r\n    routes: [\r\n        {path: '/', title: 'Profile'},\r\n        {path: '/dialogs', title: 'Message'},\r\n        {path: '/news', title: 'News'},\r\n        {path: '/music', title: 'Music'},\r\n        {path: '/settings', title: 'Settings'},\r\n        {path: '/users', title: 'Users'},\r\n    ]\r\n}\r\n\r\nexport const navbarReducer = (state: NavBarType = initialState, action: GlobalReducerType):NavBarType => {\r\n    switch (action.type) {\r\n        case NAV_BAR:\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import { UserType} from \"../redux/users-reducer\";\r\n\r\n\r\nexport let updateObjectInArray = (items:Array<UserType>,itemId:number,newObjProps:any) => items.map(u => u.id === itemId ? {...u, ...newObjProps} : u)","import {GlobalReducerType} from \"./types/typesUserReducers\";\r\nimport {usersApi} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n\r\n}\r\nexport type DispatchType = (action: GlobalReducerType) => void\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\nexport const usersReducer = (state: UsersType = initialState, action: GlobalReducerType): UsersType => {\r\n    switch (action.type) {\r\n        case 'users/FOLLOW':\r\n            return {...state, users: updateObjectInArray(state.users,action.payload.userId, {followed: true})\r\n            }\r\n        case \"users/UNFOLLOW\":\r\n            return {...state, users: updateObjectInArray(state.users,action.payload.userId, {followed: false})\r\n                }\r\n        case \"users/SET-USER\":\r\n            return {...state, users: action.payload.users}\r\n        case \"users/SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.payload.currentPage}\r\n        case \"users/SET-USERS-TOTAL-COUNT\":\r\n            return {...state, totalUsersCount: action.payload.totalCount}\r\n        case \"users/TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.payload.isFetching}\r\n        case \"users/TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.isFetching\r\n                    ? [...state.followingInProgress, action.payload.userId]\r\n                    : state.followingInProgress.filter(id => id != action.payload.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: 'users/FOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: 'users/UNFOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'users/SET-USER',\r\n        payload: {\r\n            users\r\n        }\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: 'users/SET-CURRENT-PAGE',\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport const setUsersTotalCountAC = (totalCount: number) => {\r\n    return {\r\n        type: 'users/SET-USERS-TOTAL-COUNT',\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\r\n    return {\r\n        type: 'users/TOGGLE-IS-FETCHING',\r\n        payload: {isFetching}\r\n    } as const\r\n}\r\nexport const toggleIsFollowingInProgressAC = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: 'users/TOGGLE-IS-FOLLOWING-PROGRESS',\r\n        payload: {\r\n            isFetching,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch:DispatchType,userId:number,apiMethod:any,actionCreator:any) => {\r\n    dispatch(toggleIsFollowingInProgressAC(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        console.log('if')\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingInProgressAC(false, userId))\r\n}\r\n\r\n//Thunks\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => async (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetchingAC(true))\r\n    dispatch(setCurrentPageAC(currentPage))\r\n    let data = await usersApi.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetchingAC(false))\r\n    dispatch(setUsersAC(data.items))\r\n    dispatch(setUsersTotalCountAC(data.totalCount))\r\n}\r\nexport const follow = (userId: number) => async (dispatch: DispatchType) => {\r\n    followUnfollowFlow(dispatch,userId,usersApi.follow.bind(usersApi),followSuccess)\r\n\r\n}\r\nexport const unfollow = (userId: number) =>\r\n    async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch,userId,usersApi.unfollow.bind(usersApi),unfollowSuccess)\r\n    }\r\n\r\n","import {authApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-USER-DATA\": {\r\n            return {...state, ...action.payload}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type GeneralType = SetUserDataType\r\ntype SetUserDataType = ReturnType<typeof setAuthUserData>\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'auth/SET-USER-DATA',\r\n        payload: {\r\n            id, email, login, isAuth\r\n        }\r\n    }\r\n}\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n   let response = await authApi.getMe()\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => async(dispatch: Dispatch) => {\r\n   let response = await authApi.login(email, password, rememberMe)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData() as any)\r\n            }else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    let response = await authApi.logout()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-INITIALIZED\": {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type GeneralType = SetUserDataType\r\ntype SetUserDataType = ReturnType<typeof initializeSuccess>\r\nexport const initializeSuccess = () => {\r\n    return {\r\n        type: 'INITIALIZED-SUCCESS',\r\n\r\n    }\r\n}\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(initializeSuccess())\r\n        })\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {navbarReducer} from \"./navbar-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    navbar: navbarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunkMiddleware))","import s from \"../Dialogs.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype StyledDialogProps={\r\n    dialog:string\r\n}\r\nexport const Dialog:FC<StyledDialogProps>=(props)=>{\r\n    return (\r\n        <div className={s.dialog}>{props.dialog}</div>\r\n    )\r\n}","export const required = (value:string) =>\r\n    value ? undefined : 'Field is required'\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:string) =>\r\n    value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n","import styles from './FormsControls.module.css'\r\n\r\nconst FormControl = ({input,meta:{touched,error},children}:any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,element,...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n}\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,element,...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n}","import React from 'react';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\nimport {AddMessageFormType} from \"../Dialogs\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name='newMessageBody'\r\n                   placeholder='Enter your message'\r\n                   validate={[required, maxLength50]}/>\r\n\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {UsersPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs = (props: UsersPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(({id, name}) => (<div key={id}>{name}</div>))\r\n    let messageElements = state.messages.map(({id, message}) => (<React.Fragment key={id}>\r\n        <Dialog dialog={message}/>\r\n    </React.Fragment>))\r\n    let newMessageBody = state.newMessageBody\r\n\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType={\r\n    isAuth:boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n\r\n        let {isAuth,...restProps}=props\r\n        console.log(isAuth);\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport {InitialStateType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToProps={\r\n    dialogsPage:InitialStateType\r\n}\r\ntype MapDispatchToProps={\r\n    sendMessage:(newMessageBody:string)=>void\r\n}\r\n\r\nexport type UsersPropsType=MapStateToProps & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchToProps => {\r\n    return {\r\n        sendMessage:(newMessageBody)=>{dispatch(sendMessageAC(newMessageBody))}\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,mapDispatchToProps),withAuthRedirect)(Dialogs)\r\n","import s from './StyledNavLink.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype StyledNavLinkProps = {\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport const StyledNavLink: React.FC<StyledNavLinkProps> = (props) => {\r\n    return (\r\n        <div  className={s.item}>\r\n            <NavLink className={({isActive}) => `${s.item} ${isActive ? s.active : ''}`}\r\n                     to={props.path}>{props.title}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {NavBarType} from \"../../redux/navbar-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType={\r\n    state:NavBarType\r\n}\r\n\r\n\r\nexport type NavBarPropsType=MapStateToPropsType\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>{\r\n    return {\r\n        state:state.navbar\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer=connect(mapStateToProps,mapDispatchToProps)(Navbar)\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {StyledNavLink} from \"./StyledNavLink/StyledNavLink\";\r\nimport {NavBarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar = (props:NavBarPropsType) => {\r\n\r\n    return (\r\n        <div className={s.nav}>\r\n            <nav >\r\n                {props.state.routes.map(({title,path}) => (<React.Fragment key={path+title}><StyledNavLink title={title} path={path}/></React.Fragment>))}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/preloader.81b72309.svg\";","import s from \"../../Users/users.module.css\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader=()=>{\r\n    return(\r\n        <img className={s.preloader} src={preloader}/>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    const activateEditMode = () => setEditMode(false)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(true)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    useEffect(() => {\r\n        setStatus(status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || '-------'}</span>\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n//\r\n// import React, {ChangeEvent} from \"react\";\r\n//\r\n// type ProfileStatusPropsType = {\r\n//     status: string,\r\n//     updateStatus: (status: string) => void\r\n// }\r\n// type StateType={\r\n//     editMode: boolean,\r\n//     status: string\r\n// }\r\n//\r\n// export class ProfileStatus extends React.Component<any, any> {\r\n//\r\n//     state = {\r\n//         editMode: true,\r\n//         status: this.props.status\r\n//\r\n//     }\r\n//\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         })\r\n//     }\r\n//\r\n//     deactivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: true\r\n//         })\r\n//         this.props.updateStatus(this.state.status)\r\n//     }\r\n//     onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//     }\r\n//     componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<StateType>, snapshot?: any) {\r\n//         if(prevProps.status!== this.props.status){\r\n//             this.setState({\r\n//                 status:this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//\r\n//         return (\r\n//             <>\r\n//                 {this.state.editMode\r\n//                     ? <div>\r\n//                         <span onDoubleClick={this.activateEditMode}>{this.props.status || '-------'}</span>\r\n//                     </div>\r\n//                     : <div>\r\n//                         <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n//                                value={this.state.status}/>\r\n//                     </div>\r\n//                 }\r\n//\r\n//\r\n//             </>\r\n//         )\r\n//     }\r\n//\r\n// }","import s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from './ProfileStatus'\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileInfo = ({profile, updateStatus, status}: propsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img src={profile.photos.small}\r\n                     alt='avatar'/>\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import s from \"./Post.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string| undefined\r\n    likesCount?: number\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src='https://cdn.pixabay.com/photo/2017/01/26/13/00/mom-2010524__340.png' alt={'logo'}/>\r\n                <span>{props.message}</span>\r\n                <div><span> like {props.likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {MyPostPropsType} from \"./MyPostContainers\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\n\r\ntype AddNewPostFormType = {\r\n    newPostBody: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostPropsType) => {\r\n        let post = props.posts.map(({id, message, likesCount}) => (\r\n            <React.Fragment key={id}><Post message={message} likesCount={likesCount}/></React.Fragment>))\r\n        const newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n        let onAddPost = (values: AddNewPostFormType) => {\r\n            props.addPost(values.newPostBody)\r\n        }\r\n\r\n        return (\r\n            <div className={s.myposts}>\r\n                <h3>My Posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {post}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name='newPostBody'\r\n                       placeholder='Enter your post'\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'myPostAddPostForm'})(AddNewPostForm)","import React from \"react\";\r\nimport {addPostAC, RouteType,} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<RouteType>,\r\n    newPostText: string\r\n}\r\ntype MapDispatchToProps = {\r\n    addPost: (newPostBody:string) => void,\r\n\r\n}\r\nexport type MyPostPropsType = MapStateToProps & MapDispatchToProps\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPostBody) => dispatch(addPostAC(newPostBody)),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\n\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainers\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string,\r\n    updateStatus: (status:string)=>void\r\n}\r\n\r\nexport const Profile = (props: propsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {NavigateFunction, Params, useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype CommonPropsType = ProfileContainerPropsType & { router: WithRouterType }\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n\r\n\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\ntype RoutersType = {\r\n    router: {\r\n        location: Location\r\n        params: Params<string>\r\n        navigate: NavigateFunction\r\n    }\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToProps & RoutersType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId: any = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            // if(!userId){\r\n            //     this.props.history.push('/login')\r\n            // }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport function withRouter<T>(Component: ComponentType<T>): ComponentType<T & WithRouterType> {\r\n\r\n    const ComponentWithRouterProp = (props: T & WithRouterType) => {\r\n        console.log(\"ComponentWithRouterProp\")\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component {...props} router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype WithRouterType = Location & NavigateFunction & Readonly<Params<string>>;\r\n\r\nexport default compose<React.ComponentType>(connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus,\r\n    }), withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InitialStateType} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderPropsType = {\r\n    auth: InitialStateType\r\n    logoutTC: () => void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src='http://pngimg.com/uploads/magic_hat/small/magic_hat_PNG102.png' alt={'img'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.auth.isAuth ? <div>{props.auth.login} - <button onClick={props.logoutTC}>Log out</button></div> :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType, logoutTC} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype HeaderTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderTypeProps, {}> {\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth}/>\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    auth: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logoutTC: () => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    logoutTC\r\n})(HeaderContainer)\r\n","import React, {useState} from 'react';\r\nimport s from \"./Paginator.module.css\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?:number\r\n}\r\n\r\nexport const Paginator = ({totalUsersCount, pageSize, currentPage, onPageChanged,portionSize = 10,}: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div>\r\n        {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span\r\n                    className={currentPage === p ? s.active : ''}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/risuem-chelovek-rebenku-14.e9b2c5f4.jpg\";","import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    user: UserType\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const User = ({user, follow, unfollow, followingInProgress,}: UsersPropsType) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>\r\n                <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img className={s.userPhoto} src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                         alt='avatar'/>\r\n                </NavLink>\r\n                </div>\r\n                <div>\r\n            {\r\n                user.followed\r\n                    ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  unfollow(user.id)\r\n                              }}>Unfollow</button>\r\n                    : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  follow(user.id)\r\n                              }}>Follow</button>\r\n            }\r\n                </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const Users = ({onPageChanged, users, totalUsersCount, pageSize, currentPage, ...props}: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator onPageChanged={onPageChanged} totalUsersCount={totalUsersCount} pageSize={pageSize}\r\n                       currentPage={currentPage}/>\r\n            <div>\r\n                {users.map(u =>\r\n                    <User key={u.id} user={u} followingInProgress={props.followingInProgress} unfollow={props.unfollow}\r\n                          follow={props.follow}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType) =>{\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state:AppStateType) =>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state:AppStateType) =>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:AppStateType) =>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state:AppStateType) =>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) =>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow, getUsersTC,\r\n    setCurrentPageAC,\r\n    toggleIsFollowingInProgressAC,\r\n    unfollow,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/selectors/users-selectors\";\r\n\r\n\r\nexport type MapDispatchToProps = {\r\n    setCurrentPageAC: (el: number) => void\r\n    getUsersTC: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    toggleIsFollowingInProgressAC: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    users: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype UsersPropsType = MapStateToProps & MapDispatchToProps\r\n\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsersTC(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsersTC(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <>\r\n                {this.props.isFetching && <Preloader/>}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPageAC,\r\n    toggleIsFollowingInProgressAC,\r\n    getUsersTC\r\n})(UsersAPIComponent)","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControl/FormsControl\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport style from \"./../common/FormsControl/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Login'} name={'login'} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input} type={'password'}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {loginTC})(Login)","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, Route, Routes,} from \"react-router-dom\";\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport UsersAPIComponent from \"./components/Users/UsersContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {Preloader} from \"./components/common/preloader/Preloader\";\r\n\r\nexport type AppTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass App extends React.Component<AppTypeProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer/>\r\n                    <NavbarContainer/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Routes>\r\n                            <Route path='/*' element={<ProfileContainer/>}/>\r\n                            <Route path='/profile/:userId' element={<ProfileContainer/>}/>\r\n                            <Route path='/dialogs/*' element={<DialogsContainer/>}/>\r\n                            <Route path='/news' element={<h2>News</h2>}/>\r\n                            <Route path='/music' element={<h2>Music</h2>}/>\r\n                            <Route path='/settings' element={<h2>Settings</h2>}/>\r\n                            <Route path='/users' element={<UsersAPIComponent/>}/>\r\n                            <Route path='/login' element={<Login/>}/>\r\n                        </Routes>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        initializeApp\r\n    }))(App)\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from'./redux/redux-store'\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from 'react-redux';\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I_CAQ\",\"dialogsItems\":\"Dialogs_dialogsItems__1VEp2\",\"messages\":\"Dialogs_messages__3SXIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2tkz-\",\"error\":\"FormsControls_error__32ndD\",\"formSummaryError\":\"FormsControls_formSummaryError__I9ycH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__bL0S7\",\"preloader\":\"users_preloader__Xn2Vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StyledNavLink_item__3V37q\",\"active\":\"StyledNavLink_active__2aPHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__2twgh\",\"posts\":\"MyPosts_posts__2G5MT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3c_Tr\",\"loginBlock\":\"Header_loginBlock__1pyM0\"};"],"sourceRoot":""}