{"version":3,"sources":["components/Navbar/StyledNavLink/StyledNavLink.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Users/users.module.css","reportWebVitals.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/navbar-reducer.tsx","redux/users-reducer.tsx","redux/redux-store.ts","components/Header/Header.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostContainers.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Navbar/StyledNavLink/StyledNavLink.tsx","components/Navbar/NavbarContainer.tsx","components/Navbar/Navbar.tsx","assets/images/risuem-chelovek-rebenku-14.jpg","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","message","likesCount","newPostText","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogs","name","messages","newMessageBody","NAV_BAR","routes","path","title","users","pageSize","totalUsersCount","reducers","combineReducers","profilePage","state","action","type","text","dialogsPage","body","navbar","usersPage","map","u","payload","userId","followed","store","createStore","Header","className","s","header","src","alt","ProfileInfo","avatar","Post","props","item","MyPostsContainer","connect","dispatch","addPost","updateNewPostText","post","Fragment","newPostElement","React","createRef","myposts","onChange","current","value","ref","onClick","Profile","Dialog","dialog","DialogsContainer","updateNewMessageBody","sendMessage","dialogsElements","messageElements","newMessageElement","dialogsItems","e","target","placeholder","StyledNavLink","isActive","active","to","NavbarContainer","nav","Users","axios","get","response","setUsers","data","items","this","userPhoto","photos","small","unfollow","follow","status","Component","UsersContainer","followAC","unfollowAC","setUsersAC","App","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbb30c5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StyledNavLink_item__3V37q\",\"active\":\"StyledNavLink_active__2aPHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__2twgh\",\"posts\":\"MyPosts_posts__2G5MT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3c_Tr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3rmGo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14JiU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1_ZQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__bL0S7\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {GlobalReducerType} from \"./dialogs-reducer\";\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST'\r\n}\r\n\r\nexport type UpdateNewPostTextActionType = {\r\n    type: \"UPDATE-NEW-POST-TEXT\"\r\n    text: string\r\n}\r\nexport type RouteType = {\r\n    likesCount: number\r\n    message: string\r\n    id: number\r\n}\r\nexport type ProfileType = {\r\n    posts: Array<RouteType>\r\n    newPostText: string,\r\n}\r\ntype NewPostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nexport const addPostAC=():AddPostActionType=> ({type: ADD_POST})\r\n\r\nexport const updateNewPostTextAC=(newText:string):UpdateNewPostTextActionType=>({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    text: newText\r\n})\r\n\r\nlet initialState:ProfileType={\r\n    posts: [\r\n        {id: 1, message: 'Hi,how are you', likesCount: 12},\r\n        {id: 2, message: 'Hi, you', likesCount: 11},\r\n        {id: 3, message: 'Hi,how are you', likesCount: 11},\r\n        {id: 4, message: 'how are you', likesCount: 12}\r\n    ],\r\n    newPostText: 'it-kamas',\r\n}\r\n\r\nexport const profileReducer = (state: ProfileType=initialState, action:GlobalReducerType):ProfileType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts:[...state.posts,{\r\n                    id: 5,\r\n                    message: state.newPostText,\r\n                    likesCount: 0,\r\n                }],\r\n                newPostText : ''\r\n            }\r\n        case UPDATE_NEW_POST_TEXT:\r\n                return {...state,newPostText:action.text}\r\n        default:\r\n            return state\r\n    }\r\n}","import {navBarACType} from \"./navbar-reducer\";\r\nimport {AddPostActionType, UpdateNewPostTextActionType} from \"./profile-reducer\";\r\n\r\n\r\nexport type UpdateNewMessageBodyActionType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\nexport type SendMessageActionType = {\r\n    type: \"SEND-MESSAGE\"\r\n\r\n}\r\ntype DialogType = {\r\n    message: string\r\n    id: number\r\n}\r\ntype PostsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type GlobalReducerType =\r\n    AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | UpdateNewMessageBodyActionType\r\n    | SendMessageActionType\r\n    | navBarACType\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\nexport const updateNewMessageBodyAC = (newText: string): UpdateNewMessageBodyActionType => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    body: newText\r\n})\r\nexport const sendMessageAC = (): SendMessageActionType => ({\r\n    type: SEND_MESSAGE\r\n\r\n})\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<PostsType>\r\n    messages: Array<DialogType>\r\n    newMessageBody: string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Slava'},\r\n        {id: 2, name: 'Borya'},\r\n        {id: 3, name: 'Igor'},\r\n        {id: 4, name: 'Viktor'}],\r\n    messages: [\r\n        {id: 1, message: 'Hi Kaktus'},\r\n        {id: 2, message: 'Hi klaus'},\r\n        {id: 3, message: 'Hi Valeron'},\r\n        {id: 4, message: 'Hi hello'},\r\n        {id: 5, message: 'Hi you'}\r\n    ],\r\n    newMessageBody: \"\",\r\n}\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: GlobalReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n           return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody\r\n           return {\r\n                ...state,\r\n                messages: [...state.messages,{id: 5, message: body}],\r\n                newMessageBody : ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nimport {GlobalReducerType} from \"./dialogs-reducer\";\r\n\r\nexport type navBarACType={\r\n    type:'NAV-BAR'\r\n}\r\nexport type NavbarRoutesType={\r\n    path:string\r\n    title:string\r\n}\r\nexport type NavBarType = {\r\n    routes:Array<NavbarRoutesType>\r\n}\r\nconst NAV_BAR='NAV-BAR'\r\nexport const navBarAC=():navBarACType=>({\r\n    type:NAV_BAR\r\n})\r\n\r\nlet initialState:NavBarType = {\r\n    routes: [\r\n        {path: '/', title: 'Profile'},\r\n        {path: '/dialogs', title: 'Message'},\r\n        {path: '/news', title: 'News'},\r\n        {path: '/music', title: 'Music'},\r\n        {path: '/settings', title: 'Settings'},\r\n        {path: '/users', title: 'Users'},\r\n    ]\r\n}\r\n\r\nexport const navbarReducer = (state: NavBarType = initialState, action: GlobalReducerType):NavBarType => {\r\n    switch (action.type) {\r\n        case NAV_BAR:\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","export type UserType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    // location: {\r\n    //     city: string\r\n    //     country: string\r\n    // }\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize:number\r\n    totalUsersCount:number\r\n}\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize:5,\r\n    totalUsersCount:0\r\n}\r\nexport const usersReducer = (state: UsersType = initialState, action: GlobalReducerType): UsersType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {...state, users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: true} : u)}\r\n        case \"UNFOLLOW\":\r\n            return {...state, users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: false} : u)}\r\n        case \"SET-USER\":\r\n            return {...state, users: [...state.users, ...action.payload.users]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype GlobalReducerType = FollowACType\r\n    | UnfollowACType\r\n    | SetUsersACType\r\n// type UsersACType=ReturnType<typeof UsersAC>\r\n// export const UsersAC=()=>{\r\n//     return{\r\n//         type:'USERS'\r\n//     }as const\r\n//\r\n// }\r\n\r\ntype FollowACType = ReturnType<typeof followAC>\r\nexport const followAC = (userId: number) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\ntype UnfollowACType = ReturnType<typeof unfollowAC>\r\nexport const unfollowAC = (userId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\ntype SetUsersACType = ReturnType<typeof setUsersAC>\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'SET-USER',\r\n        payload: {\r\n            users\r\n        }\r\n    } as const\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {navbarReducer} from \"./navbar-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\n\r\n\r\nlet reducers=combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    navbar:navbarReducer,\r\n    usersPage:usersReducer\r\n\r\n})\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store=createStore(reducers)","import React from \"react\";\r\nimport s from './Header.module.css'\r\n\r\nexport const Header=()=>{\r\n    return(\r\n        <header className={s.header}>\r\n            <img\r\n                 src='http://pngimg.com/uploads/magic_hat/small/magic_hat_PNG102.png' alt={'img'}/>\r\n        </header>\r\n    )\r\n}\r\n","import s from './ProfileInfo.module.css'\r\n\r\n\r\nexport const ProfileInfo=()=>{\r\n    return(\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300' alt={'img'}/>\r\n            </div>\r\n            <div className={s.avatar}>\r\n                <img src=\"https://www.pixsy.com/wp-content/uploads/2021/04/ben-sweet-2LowviVHZ-E-unsplash-1.jpeg\"\r\n                     alt='avatar'/>\r\n                descrip\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import s from \"./Post.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string| undefined\r\n    likesCount?: number\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src='https://cdn.pixabay.com/photo/2017/01/26/13/00/mom-2010524__340.png' alt={'logo'}/>\r\n                <span>{props.message}</span>\r\n                <div><span> like {props.likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {addPostAC, RouteType, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<RouteType>,\r\n    newPostText: string\r\n}\r\ntype MapDispatchToProps = {\r\n    addPost: () => void,\r\n    updateNewPostText: (text: string) => void\r\n}\r\nexport type MyPostPropsType = MapStateToProps & MapDispatchToProps\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: () => dispatch(addPostAC()),\r\n        updateNewPostText: (text: string) => dispatch(updateNewPostTextAC(text))\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {MyPostPropsType} from \"./MyPostContainers\";\r\n\r\n\r\nexport const MyPosts = (props: MyPostPropsType) => {\r\n    let post = props.posts.map(({id, message, likesCount}) => (\r\n        <React.Fragment key={id}><Post message={message} likesCount={likesCount}/></React.Fragment>))\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n    const onPostChange = () => {\r\n        debugger\r\n        let text: string = newPostElement.current?.value || \"\"\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myposts}>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <div><textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}/></div>\r\n                <button onClick={onAddPost}>Add post</button>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainers\";\r\n\r\ntype ProfileTypeProps = {\r\n\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"../Dialogs.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype StyledDialogProps={\r\n    dialog:string\r\n}\r\nexport const Dialog:FC<StyledDialogProps>=(props)=>{\r\n    return (\r\n        <div className={s.dialog}>{props.dialog}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport {InitialStateType, sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToProps={\r\n    dialogsPage:InitialStateType\r\n}\r\ntype MapDispatchToProps={\r\n    updateNewMessageBody:(body:string)=>void,\r\n    sendMessage:()=>void\r\n}\r\n\r\nexport type UsersPropsType=MapStateToProps & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchToProps => {\r\n    return {\r\n        updateNewMessageBody:(body:string)=>{dispatch(updateNewMessageBodyAC(body))},\r\n        sendMessage:()=>{dispatch(sendMessageAC())}\r\n    }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {UsersPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nexport const Dialogs= (props:UsersPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(({id, name}) => (<div key={id}>{name}</div>))\r\n    let messageElements = state.messages.map(({id, message}) => (<React.Fragment key={id}>\r\n        <Dialog dialog={message}/>\r\n    </React.Fragment>))\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    const newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    const onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>\r\n    ) => {\r\n        let body = e.target.value\r\n        props.updateNewMessageBody(body)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                {messageElements}\r\n                <textarea value={newMessageBody} onChange={onNewMessageChange} ref={newMessageElement}\r\n                          placeholder='Enter your message'></textarea>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Add message</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import s from './StyledNavLink.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype StyledNavLinkProps = {\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport const StyledNavLink: React.FC<StyledNavLinkProps> = (props) => {\r\n    return (\r\n        <div  className={s.item}>\r\n            <NavLink className={({isActive}) => `${s.item} ${isActive ? s.active : ''}`}\r\n                     to={props.path}>{props.title}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {NavBarType} from \"../../redux/navbar-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType={\r\n    state:NavBarType\r\n}\r\n\r\n\r\nexport type NavBarPropsType=MapStateToPropsType\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>{\r\n    return {\r\n        state:state.navbar\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer=connect(mapStateToProps,mapDispatchToProps)(Navbar)\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {StyledNavLink} from \"./StyledNavLink/StyledNavLink\";\r\nimport {NavBarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar = (props:NavBarPropsType) => {\r\n\r\n    return (\r\n        <div className={s.nav}>\r\n            <nav >\r\n                {props.state.routes.map(({title,path}) => (<React.Fragment key={path+title}><StyledNavLink title={title} path={path}/></React.Fragment>))}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/risuem-chelovek-rebenku-14.e9b2c5f4.jpg\";","import React from \"react\";\r\nimport s from './users.module.css'\r\nimport axios from \"axios\";\r\nimport userPhoto from '../../assets/images/risuem-chelovek-rebenku-14.jpg'\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype UsersPropsType = {\r\n    users: UserType[]\r\n    totalUsersCount:number\r\n    pageSize:number\r\n    setUsers: (Users: UserType[]) => void\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n}\r\n\r\nexport class Users extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        axios.get('https://social-network.samuraijs.com/api/1.0/users').then(response => {\r\n            this.props.setUsers(response.data.items)\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let pagesCount=this.props.totalUsersCount/this.props.pageSize\r\n\r\n\r\n\r\n        return <div>\r\n\r\n            {this.props.users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <img className={s.userPhoto} src={u.photos.small !== null ? u.photos.small : userPhoto}/>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        u.followed\r\n                            ? <button onClick={() => this.props.unfollow(u.id)}>Unfollow</button>\r\n                            : <button onClick={() => this.props.follow(u.id)}>Follow</button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n                <span>\r\n                <span>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </span>\r\n            </span>\r\n            </div>)}\r\n\r\n        </div>\r\n    }\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {followAC, setUsersAC, unfollowAC, UserType} from \"../../redux/users-reducer\";\r\n\r\nexport type MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize:number\r\n    totalUsersCount:number\r\n}\r\nexport type MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n}\r\nexport type UsersPropsType = MapDispatchToProps & MapStateToPropsType\r\n\r\nexport const mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize:state.usersPage.pageSize,\r\n        totalUsersCount:state.usersPage.totalUsersCount\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setUsers: (users: Array<UserType>) => {\r\n            dispatch(setUsersAC(users))\r\n        }\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {Profile} from \"./components/Profile/Profile\";\nimport {Routes, Route, HashRouter} from \"react-router-dom\";\nimport { DialogsContainer } from './components/Dialogs/DialogsContainer';\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\n\nexport type AppTypeProps={}\n\nconst App:React.FC<AppTypeProps>=(props)=>{\n\n    return (\n        <HashRouter>\n            <div className='app-wrapper'>\n            <Header/>\n            <NavbarContainer/>\n            <div className='app-wrapper-content'>\n                <Routes>\n                    <Route path='/' element={<Profile  />}/>\n                    <Route path='/dialogs/*' element={<DialogsContainer />}/>\n                    <Route path='/news' element={<h2>News</h2>}/>\n                    <Route path='/music' element={<h2>Music</h2>}/>\n                    <Route path='/settings' element={<h2>Settings</h2>}/>\n                    <Route path='/users' element={<UsersContainer/>}/>\n                </Routes>\n            </div>\n        </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from'./redux/redux-store'\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from 'react-redux';\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I_CAQ\",\"dialogsItems\":\"Dialogs_dialogsItems__1VEp2\",\"messages\":\"Dialogs_messages__3SXIq\"};"],"sourceRoot":""}