{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Users/users.module.css","components/Navbar/StyledNavLink/StyledNavLink.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileContainer.tsx","reportWebVitals.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/navbar-reducer.tsx","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/redux-store.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Navbar/StyledNavLink/StyledNavLink.tsx","components/Navbar/NavbarContainer.tsx","components/Navbar/Navbar.tsx","assets/images/risuem-chelovek-rebenku-14.jpg","components/Users/Users.tsx","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostContainers.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","message","likesCount","newPostText","profile","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogs","name","messages","newMessageBody","NAV_BAR","routes","path","title","users","pageSize","totalUsersCount","currentPage","isFetching","email","login","isAuth","reducers","combineReducers","profilePage","state","action","type","text","dialogsPage","body","navbar","usersPage","map","u","payload","userId","followed","totalCount","auth","data","store","createStore","Dialog","props","className","s","dialog","DialogsContainer","connect","dispatch","updateNewMessageBody","sendMessage","dialogsElements","messageElements","Fragment","newMessageElement","React","createRef","dialogsItems","value","onChange","e","target","ref","placeholder","onClick","StyledNavLink","item","isActive","active","to","NavbarContainer","nav","Users","pagesCount","Math","ceil","pages","i","push","el","selectedPage","onPageChanged","userPhoto","src","photos","small","alt","axios","delete","withCredentials","headers","response","resultCode","unfollow","post","follow","status","Preloader","preloader","UsersAPIComponent","pageNumber","setCurrentPage","toggleIsFetching","get","setUsers","items","this","setUsersTotalCount","UsersContainer","ProfileInfo","avatar","Post","MyPostsContainer","addPost","updateNewPostText","newPostElement","myposts","current","Profile","ProfileContainer","router","params","console","log","setUserProfile","WithUrlDataContainerComponent","location","useLocation","navigate","useNavigate","useParams","Header","header","loginBlock","HeaderContainer","setAuthUserData","App","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b280bc9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I_CAQ\",\"dialogsItems\":\"Dialogs_dialogsItems__1VEp2\",\"messages\":\"Dialogs_messages__3SXIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__bL0S7\",\"selectedPage\":\"users_selectedPage__3uKIF\",\"preloader\":\"users_preloader__Xn2Vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StyledNavLink_item__3V37q\",\"active\":\"StyledNavLink_active__2aPHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__2twgh\",\"posts\":\"MyPosts_posts__2G5MT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3c_Tr\",\"loginBlock\":\"Header_loginBlock__1pyM0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1_ZQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3rmGo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14JiU\"};","import React, {ComponentType, FC} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {setUserProfile} from \"../../redux/profile-reducer\";\r\nimport {NavigateFunction, Params,  useLocation, useNavigate, useParams} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype CommonPropsType =  ProfileContainerPropsType & {router: WithRouterType}\r\n// type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToProps\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePropsType | null\r\n}\r\ntype MapDispatchToProps = {\r\n    setUserProfile: (profile: ProfilePropsType) => void\r\n\r\n\r\n}\r\n\r\ntype RoutersType = {\r\n    router: {\r\n        location: Location\r\n        params: Params<string>\r\n        navigate: NavigateFunction\r\n    }\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToProps & RoutersType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId: any = this.props.router.params.userId\r\n        console.log(userId)\r\n        if (!userId) {\r\n            userId = '2'\r\n        }\r\n\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId)\r\n            .then(response => {\r\n                this.props.setUserProfile(response.data)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile\r\n})\r\n\r\nlet WithUrlDataContainerComponent: ComponentType<ProfileContainerPropsType & any> = withRouter(ProfileContainer)\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToProps,{},AppStateType>(mapStateToProps, {\r\n    setUserProfile\r\n})(WithUrlDataContainerComponent)\r\n\r\n\r\n\r\n\r\n// export function withRouter<T>(Component: ComponentType<T>):any {\r\n//     console.log(\"test\")\r\n//     const  ComponentWithRouterProp:FC<T & WithRouterType>=(props)=> {\r\n//         console.log(\"test2\")\r\n//\r\n//         let location = useLocation();\r\n//         let navigate = useNavigate();\r\n//         let params = useParams();\r\n//         // return (\r\n//         //     <Component\r\n//         //         {...props}\r\n//         //         router={{ location, navigate, params }}\r\n//         //     />\r\n//         // );\r\n//         return <div>test</div>\r\n//     }\r\n//     return ComponentWithRouterProp\r\n// }\r\n//\r\n// type WithRouterType = Location & NavigateFunction & Readonly<Params<string>>;\r\n\r\n\r\n\r\n\r\nexport function withRouter<T>(Component: ComponentType<T>): ComponentType<T & WithRouterType> {\r\n\r\n    const ComponentWithRouterProp = (props: T & WithRouterType) => {\r\n        console.log(\"ComponentWithRouterProp\")\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype WithRouterType = Location & NavigateFunction & Readonly<Params<string>>;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\n\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST'\r\n}\r\n\r\nexport type UpdateNewPostTextActionType = {\r\n    type: \"UPDATE-NEW-POST-TEXT\"\r\n    text: string\r\n}\r\nexport type RouteType = {\r\n    likesCount: number\r\n    message: string\r\n    id: number\r\n}\r\nexport type ProfileType = {\r\n    posts: Array<RouteType>\r\n    newPostText: string,\r\n    profile:null | ProfilePropsType\r\n}\r\ntype NewPostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype GlobalTypeAction = AddPostACType\r\n    | UpdateNewPostTextACType\r\n    | SetUserProfileACType\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\ntype AddPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST\r\n    }as const\r\n}\r\n\r\ntype UpdateNewPostTextACType = ReturnType<typeof updateNewPostTextAC>\r\nexport const updateNewPostTextAC = (newText: string): UpdateNewPostTextActionType =>{\r\n    return{\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        text: newText\r\n    } as const\r\n}\r\ntype SetUserProfileACType = ReturnType<typeof setUserProfile>\r\nexport const setUserProfile = (profile:ProfilePropsType) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile,\r\n    }as const\r\n}\r\n\r\nlet initialState: ProfileType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi,how are you', likesCount: 12},\r\n        {id: 2, message: 'Hi, you', likesCount: 11},\r\n        {id: 3, message: 'Hi,how are you', likesCount: 11},\r\n        {id: 4, message: 'how are you', likesCount: 12}\r\n    ],\r\n    newPostText: 'it-kamas',\r\n    profile: null\r\n}\r\n\r\nexport const profileReducer = (state: ProfileType = initialState, action: GlobalTypeAction): ProfileType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: 5,\r\n                    message: state.newPostText,\r\n                    likesCount: 0,\r\n                }],\r\n                newPostText: ''\r\n            }\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {...state, newPostText: action.text}\r\n        case \"SET-USER-PROFILE\":\r\n            return {\r\n                ...state,profile:action.profile\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {navBarACType} from \"./navbar-reducer\";\r\nimport {AddPostActionType, UpdateNewPostTextActionType} from \"./profile-reducer\";\r\n\r\n\r\nexport type UpdateNewMessageBodyActionType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\nexport type SendMessageActionType = {\r\n    type: \"SEND-MESSAGE\"\r\n\r\n}\r\ntype DialogType = {\r\n    message: string\r\n    id: number\r\n}\r\ntype PostsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type GlobalReducerType =\r\n    AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | UpdateNewMessageBodyActionType\r\n    | SendMessageActionType\r\n    | navBarACType\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\nexport const updateNewMessageBodyAC = (newText: string): UpdateNewMessageBodyActionType => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    body: newText\r\n})\r\nexport const sendMessageAC = (): SendMessageActionType => ({\r\n    type: SEND_MESSAGE\r\n\r\n})\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<PostsType>\r\n    messages: Array<DialogType>\r\n    newMessageBody: string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Slava'},\r\n        {id: 2, name: 'Borya'},\r\n        {id: 3, name: 'Igor'},\r\n        {id: 4, name: 'Viktor'}],\r\n    messages: [\r\n        {id: 1, message: 'Hi Kaktus'},\r\n        {id: 2, message: 'Hi klaus'},\r\n        {id: 3, message: 'Hi Valeron'},\r\n        {id: 4, message: 'Hi hello'},\r\n        {id: 5, message: 'Hi you'}\r\n    ],\r\n    newMessageBody: \"\",\r\n}\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: GlobalReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n           return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody\r\n           return {\r\n                ...state,\r\n                messages: [...state.messages,{id: 5, message: body}],\r\n                newMessageBody : ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nimport {GlobalReducerType} from \"./dialogs-reducer\";\r\n\r\nexport type navBarACType={\r\n    type:'NAV-BAR'\r\n}\r\nexport type NavbarRoutesType={\r\n    path:string\r\n    title:string\r\n}\r\nexport type NavBarType = {\r\n    routes:Array<NavbarRoutesType>\r\n}\r\nconst NAV_BAR='NAV-BAR'\r\nexport const navBarAC=():navBarACType=>({\r\n    type:NAV_BAR\r\n})\r\n\r\nlet initialState:NavBarType = {\r\n    routes: [\r\n        {path: '/profile', title: 'Profile'},\r\n        {path: '/dialogs', title: 'Message'},\r\n        {path: '/news', title: 'News'},\r\n        {path: '/music', title: 'Music'},\r\n        {path: '/settings', title: 'Settings'},\r\n        {path: '/users', title: 'Users'},\r\n    ]\r\n}\r\n\r\nexport const navbarReducer = (state: NavBarType = initialState, action: GlobalReducerType):NavBarType => {\r\n    switch (action.type) {\r\n        case NAV_BAR:\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","export type UserType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    // location: {\r\n    //     city: string\r\n    //     country: string\r\n    // }\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n\r\n}\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 20,\r\n    currentPage: 3,\r\n    isFetching: true\r\n}\r\nexport const usersReducer = (state: UsersType = initialState, action: GlobalReducerType): UsersType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {...state, users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: true} : u)}\r\n        case \"UNFOLLOW\":\r\n            return {...state, users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: false} : u)}\r\n        case \"SET-USER\":\r\n            return {...state, users: action.payload.users}\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.payload.currentPage}\r\n        case \"SET-USERS-TOTAL-COUNT\":\r\n            return {...state, totalUsersCount: action.payload.totalCount}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.payload.isFetching}\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype GlobalReducerType = FollowACType\r\n    | UnfollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageAC\r\n    | SetUsersTotalCountACType\r\n    | ToggleIsFetchingACType\r\n\r\ntype FollowACType = ReturnType<typeof follow>\r\nexport const follow = (userId: number) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\ntype UnfollowACType = ReturnType<typeof unfollow>\r\nexport const unfollow = (userId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\ntype SetUsersACType = ReturnType<typeof setUsers>\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'SET-USER',\r\n        payload: {\r\n            users\r\n        }\r\n    } as const\r\n}\r\ntype SetCurrentPageAC = ReturnType<typeof setCurrentPage>\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'SET-CURRENT-PAGE',\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\ntype SetUsersTotalCountACType = ReturnType<typeof setUsersTotalCount>\r\nexport const setUsersTotalCount = (totalCount: number) => {\r\n    return {\r\n        type: 'SET-USERS-TOTAL-COUNT',\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\ntype ToggleIsFetchingACType = ReturnType<typeof toggleIsFetching>\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE-IS-FETCHING',\r\n        payload: {isFetching}\r\n    } as const\r\n}","export type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\": {\r\n            return {...state, ...action.data, isAuth: true}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type GeneralType = SetUserDataType\r\ntype SetUserDataType = ReturnType<typeof setAuthUserData>\r\nexport const setAuthUserData = (id: number, email: string, login: string, isAuth: boolean) => {\r\n    return {\r\n        type: 'SET-USER-DATA',\r\n        data: {\r\n            id, email, login, isAuth\r\n        }\r\n    }\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {navbarReducer} from \"./navbar-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n\r\nlet reducers=combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    navbar:navbarReducer,\r\n    usersPage:usersReducer,\r\n    auth:authReducer,\r\n\r\n})\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store=createStore(reducers)","import s from \"../Dialogs.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype StyledDialogProps={\r\n    dialog:string\r\n}\r\nexport const Dialog:FC<StyledDialogProps>=(props)=>{\r\n    return (\r\n        <div className={s.dialog}>{props.dialog}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport {InitialStateType, sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToProps={\r\n    dialogsPage:InitialStateType\r\n}\r\ntype MapDispatchToProps={\r\n    updateNewMessageBody:(body:string)=>void,\r\n    sendMessage:()=>void\r\n}\r\n\r\nexport type UsersPropsType=MapStateToProps & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchToProps => {\r\n    return {\r\n        updateNewMessageBody:(body:string)=>{dispatch(updateNewMessageBodyAC(body))},\r\n        sendMessage:()=>{dispatch(sendMessageAC())}\r\n    }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {UsersPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nexport const Dialogs= (props:UsersPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(({id, name}) => (<div key={id}>{name}</div>))\r\n    let messageElements = state.messages.map(({id, message}) => (<React.Fragment key={id}>\r\n        <Dialog dialog={message}/>\r\n    </React.Fragment>))\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    const newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    const onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>\r\n    ) => {\r\n        let body = e.target.value\r\n        props.updateNewMessageBody(body)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                {messageElements}\r\n                <textarea value={newMessageBody} onChange={onNewMessageChange} ref={newMessageElement}\r\n                          placeholder='Enter your message'></textarea>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Add message</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import s from './StyledNavLink.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype StyledNavLinkProps = {\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport const StyledNavLink: React.FC<StyledNavLinkProps> = (props) => {\r\n    return (\r\n        <div  className={s.item}>\r\n            <NavLink className={({isActive}) => `${s.item} ${isActive ? s.active : ''}`}\r\n                     to={props.path}>{props.title}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {NavBarType} from \"../../redux/navbar-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType={\r\n    state:NavBarType\r\n}\r\n\r\n\r\nexport type NavBarPropsType=MapStateToPropsType\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>{\r\n    return {\r\n        state:state.navbar\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer=connect(mapStateToProps,mapDispatchToProps)(Navbar)\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {StyledNavLink} from \"./StyledNavLink/StyledNavLink\";\r\nimport {NavBarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar = (props:NavBarPropsType) => {\r\n\r\n    return (\r\n        <div className={s.nav}>\r\n            <nav >\r\n                {props.state.routes.map(({title,path}) => (<React.Fragment key={path+title}><StyledNavLink title={title} path={path}/></React.Fragment>))}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/risuem-chelovek-rebenku-14.e9b2c5f4.jpg\";","import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            {pages.map(el => {\r\n                return <span className={props.currentPage === el ? s.selectedPage : ''}\r\n                             onClick={() => {\r\n                                 props.onPageChanged(el)\r\n                             }}>{el}</span>\r\n            })\r\n            }\r\n            {props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                <div>\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <img className={s.userPhoto} src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                         alt='avatar'/>\r\n                </NavLink>\r\n                </div>\r\n                <div>\r\n            {\r\n                u.followed\r\n                    ? <button onClick={() => {\r\n                        axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {\r\n                            withCredentials: true,\r\n                            headers: {\r\n                                'API-KEY': \"1be3afd1-cb12-4713-953a-273c84cfad9b\"\r\n                            }\r\n\r\n\r\n                        })\r\n                            .then(response => {\r\n                                if (response.data.resultCode) {\r\n                                    props.unfollow(u.id)\r\n                                }\r\n                            })\r\n\r\n\r\n                    }}>Unfollow</button>\r\n                    : <button onClick={() => {\r\n\r\n                        axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {}, {\r\n                            withCredentials: true,\r\n                            headers: {\r\n                                'API-KEY': \"1be3afd1-cb12-4713-953a-273c84cfad9b\"\r\n                            }\r\n                        })\r\n                            .then(response => {\r\n                                if (response.data.resultCode) {\r\n                                    props.follow(u.id)\r\n                                }\r\n                            })\r\n\r\n                    }\r\n\r\n                    }>Follow</button>\r\n            }\r\n                </div>\r\n                </span>\r\n                <span>\r\n                <span>\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n                </span>\r\n                <span>\r\n                <div>{'u.location.country'}</div>\r\n                <div>{'u.location.city'}</div>\r\n                </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/preloader.81b72309.svg\";","import s from \"../../Users/users.module.css\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader=()=>{\r\n    return(\r\n        <img className={s.preloader} src={preloader}/>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setUsers,\r\n    setUsersTotalCount,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\nexport type UsersPropsType = {\r\n    users: UserType[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setUsers: (Users: UserType[]) => void\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    setCurrentPage: (el: number) => void\r\n    setUsersTotalCount: (totalCount: number) => void\r\n    isFetching: boolean\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\nexport class UsersAPIComponent extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`,{\r\n            withCredentials:true\r\n        })\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n                this.props.setUsersTotalCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,{\r\n            withCredentials:true\r\n        })\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <>\r\n                {this.props.isFetching && <Preloader/>}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n\r\n                />\r\n            </>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setUsersTotalCount,\r\n    toggleIsFetching,\r\n})(UsersAPIComponent)","import s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null\r\n}\r\nexport const ProfileInfo = ({...props}: propsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return(\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300' alt={'img'}/>\r\n            </div>\r\n            <div className={s.avatar}>\r\n                <img src={props.profile.photos.small}\r\n                     alt='avatar'/>\r\n                descrip\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import s from \"./Post.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string| undefined\r\n    likesCount?: number\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src='https://cdn.pixabay.com/photo/2017/01/26/13/00/mom-2010524__340.png' alt={'logo'}/>\r\n                <span>{props.message}</span>\r\n                <div><span> like {props.likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {addPostAC, RouteType, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<RouteType>,\r\n    newPostText: string\r\n}\r\ntype MapDispatchToProps = {\r\n    addPost: () => void,\r\n    updateNewPostText: (text: string) => void\r\n}\r\nexport type MyPostPropsType = MapStateToProps & MapDispatchToProps\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: () => dispatch(addPostAC()),\r\n        updateNewPostText: (text: string) => dispatch(updateNewPostTextAC(text))\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {MyPostPropsType} from \"./MyPostContainers\";\r\n\r\n\r\nexport const MyPosts = (props: MyPostPropsType) => {\r\n    let post = props.posts.map(({id, message, likesCount}) => (\r\n        <React.Fragment key={id}><Post message={message} likesCount={likesCount}/></React.Fragment>))\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n    const onPostChange = () => {\r\n        debugger\r\n        let text: string = newPostElement.current?.value || \"\"\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myposts}>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <div><textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}/></div>\r\n                <button onClick={onAddPost}>Add post</button>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainers\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\ntype propsType = {\r\nprofile:ProfilePropsType | null\r\n}\r\n\r\nexport const Profile = (props:propsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InitialStateType} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderPropsType={\r\n    auth:InitialStateType\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src='http://pngimg.com/uploads/magic_hat/small/magic_hat_PNG102.png' alt={'img'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.auth.isAuth ? props.auth.login : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType,setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype HeaderTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n class HeaderContainer extends React.Component<HeaderTypeProps, {}> {\r\n\r\n    componentDidMount() {\r\n        axios.get('https://social-network.samuraijs.com/api/1.0/auth/me',{\r\n            withCredentials:true\r\n        })\r\n            .then(response=>{\r\n                if(response.data.resultCode===0){\r\n                    let{id,email,login}=response.data.data\r\n                    this.props.setAuthUserData(id, email, login, true)\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth} />\r\n    }\r\n}\r\ntype MapStateToPropsType={\r\n    auth:InitialStateType\r\n}\r\ntype MapDispatchToPropsType={\r\n    setAuthUserData: (userId: number, email: string , login: string , isAuth: boolean) => void\r\n}\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>({\r\n    auth:state.auth\r\n\r\n})\r\n\r\nexport default connect<MapStateToPropsType,MapDispatchToPropsType,{},AppStateType>(mapStateToProps,{setAuthUserData})(HeaderContainer)\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Routes, Route,BrowserRouter} from \"react-router-dom\";\r\nimport { DialogsContainer } from './components/Dialogs/DialogsContainer';\r\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\n\r\nexport type AppTypeProps={}\r\n\r\nconst App:React.FC<AppTypeProps>=(props)=>{\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n            <HeaderContainer/>\r\n            <NavbarContainer/>\r\n            <div className='app-wrapper-content'>\r\n                <Routes>\r\n                    <Route path='/profile/' element={<ProfileContainer/>}/>\r\n                    <Route path='/profile/:userId' element={<ProfileContainer/>}/>\r\n                    <Route path='/dialogs/*' element={<DialogsContainer />}/>\r\n                    <Route path='/news' element={<h2>News</h2>}/>\r\n                    <Route path='/music' element={<h2>Music</h2>}/>\r\n                    <Route path='/settings' element={<h2>Settings</h2>}/>\r\n                    <Route path='/users' element={<UsersContainer/>}/>\r\n                </Routes>\r\n            </div>\r\n        </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from'./redux/redux-store'\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from 'react-redux';\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}