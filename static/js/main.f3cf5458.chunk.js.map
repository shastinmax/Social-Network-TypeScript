{"version":3,"sources":["components/Navbar/Navbar.module.css","components/common/Paginator/Paginator.module.css","components/Profile/MyPosts/Post/Post.module.css","reportWebVitals.ts","api/api.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","redux/navbar-reducer.tsx","utils/object-helpers.ts","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.ts","components/Navbar/StyledNavLink/StyledNavLink.tsx","components/Navbar/NavbarContainer.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/common/Paginator/Paginator.tsx","assets/images/risuem-chelovek-rebenku-14.jpg","components/Users/User.tsx","components/Users/Users.tsx","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","redux/selectors/users-selectors.ts","components/Users/UsersContainer.tsx","components/common/FormsControl/FormsControl.tsx","utils/validators/validators.tsx","components/Login/Login.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainers.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","index.tsx","components/common/FormsControl/FormsControls.module.css","components/Dialogs/Dialogs.module.css","components/Users/users.module.css","components/Navbar/StyledNavLink/StyledNavLink.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersApi","getUsers","currentPage","pageSize","get","response","data","unfollow","userId","delete","follow","post","getProfile","console","warn","profileApi","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authApi","email","password","rememberMe","initialState","posts","id","message","likesCount","newPostText","setStatus","type","payload","getUserProfile","dispatch","a","SEND_MESSAGE","dialogs","name","messages","newMessageBody","NAV_BAR","routes","path","title","updateObjectInArray","items","itemId","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPageAC","toggleIsFetchingAC","toggleIsFollowingInProgressAC","followUnfollowFlow","apiMethod","actionCreator","resultCode","log","login","isAuth","setAuthUserData","getAuthUserData","initialized","reducers","combineReducers","profilePage","state","action","newPostBody","filter","p","postId","photos","dialogsPage","body","navbar","usersPage","followed","totalCount","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","StyledNavLink","props","className","s","item","isActive","active","to","NavbarContainer","connect","nav","Fragment","Header","header","src","alt","loginBlock","onClick","logoutTC","HeaderContainer","this","React","Component","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","e","User","user","userPhoto","small","disabled","some","Users","Preloader","preloader","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIComponent","pageNumber","getUsersTC","bind","FormControl","input","meta","touched","error","children","hasError","styles","formControl","Textarea","restProps","child","element","Input","createField","placeholder","validators","component","text","Field","validate","required","value","undefined","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","handleSubmit","onSubmit","style","formSummaryError","loginTC","stopSubmit","_error","ProfileStatus","editMode","setEditMode","useEffect","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","ProfileDataFormReduxForm","Object","keys","contacts","key","ProfileInfo","useDispatch","isOwner","avatar","large","mainPhoto","files","initialValues","goToEditMode","Contact","contactTitle","contactValue","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Post","MyPosts","memo","myposts","AddNewPostFormRedux","values","addPost","maxLength10","MyPostsContainer","addPostAC","Profile","ProfileContainer","router","params","authorizedUserId","refreshProfile","prevProps","prevState","snapshot","compose","file","getState","Promise","reject","location","useLocation","navigate","useNavigate","useParams","Dialog","dialog","maxLength50","AddMessageFormRedux","mapStateToProps","sendMessage","sendMessageAC","dialogsElements","messageElements","dialogsItems","App","initializeApp","DialogsContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3cf5458.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1_ZQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__boplF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14JiU\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\nimport {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': \"1be3afd1-cb12-4713-953a-273c84cfad9b\"\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object')\r\n        return profileApi.getProfile(userId)\r\n    },\r\n}\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('/profile/status', {status})\r\n    },\r\n    savePhoto(photoFile:string){\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put('/profile/photo', formData,{\r\n            headers: {\r\n                'Content-Type' : 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile:ProfilePropsType){\r\n\r\n        return instance.put('profile',profile)\r\n    }\r\n}\r\nexport const authApi = {\r\n    getMe() {\r\n        return instance.get('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const getUsers2 = (currentPage: number = 1, pageSize: number = 10) => {\r\n    return instance.get(`follow?page=${currentPage}&count=${pageSize}`,).then(response => response.data)\r\n}\r\n\r\n","import {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\nimport {GlobalTypeAction} from \"./types/typesProfileReducer\";\r\nimport {profileApi, usersApi} from \"../api/api\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST',\r\n    newPostBody: string\r\n}\r\nexport type RouteType = {\r\n    likesCount: number\r\n    message: string\r\n    id: number\r\n}\r\nexport type ProfileType = {\r\n    posts: Array<RouteType>\r\n    newPostText: string,\r\n    profile: null | any\r\n    status: string\r\n}\r\nexport type DispatchType = (action: GlobalTypeAction) => void\r\n\r\nlet initialState: ProfileType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi,how are you', likesCount: 12},\r\n        {id: 2, message: 'Hi, you', likesCount: 11},\r\n        {id: 3, message: 'Hi,how are you', likesCount: 11},\r\n        {id: 4, message: 'how are you', likesCount: 12}\r\n    ],\r\n    newPostText: 'it-kamas',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfileType = initialState, action: GlobalTypeAction): ProfileType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: 5,\r\n                    message: action.newPostBody,\r\n                    likesCount: 0,\r\n                }],\r\n                newPostText: ''\r\n            }\r\n        case \"SET-USER-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.payload.status\r\n            }\r\n        case \"DELETE-POST\":\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id !== action.payload.postId)\r\n            }\r\n        case \"SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostAC = (newPostBody: string): AddPostActionType => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        newPostBody\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfilePropsType) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile,\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET-STATUS',\r\n        payload: {\r\n            status\r\n        }\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: 'DELETE-POST',\r\n        payload: {\r\n            postId\r\n        }\r\n    } as const\r\n}\r\nexport const savePhotoSuccess = (photos: any) => {\r\n    return {\r\n        type: 'SAVE-PHOTO-SUCCESS',\r\n        photos\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: DispatchType) => {\r\n    let response = await usersApi.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: DispatchType) => {\r\n    let response = await profileApi.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: DispatchType) => {\r\n    let response = await profileApi.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: any) => async (dispatch: DispatchType) => {\r\n    let response = await profileApi.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfilePropsType) => async (dispatch: DispatchType, getState: () => AppStateType) => {\r\n    const userId = getState().auth.id\r\n    let response = await profileApi.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        //@ts-ignore\r\n        dispatch(getUserProfile(userId))\r\n    } else {\r\n        // @ts-ignore\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}));\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\n","import {navBarACType} from \"./navbar-reducer\";\r\nimport {AddPostActionType,} from \"./profile-reducer\";\r\n\r\n\r\nexport type UpdateNewMessageBodyActionType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\nexport type SendMessageActionType = {\r\n    type: \"SEND-MESSAGE\",\r\n    newMessageBody: string\r\n\r\n}\r\ntype DialogType = {\r\n    message: string\r\n    id: number\r\n}\r\ntype PostsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type GlobalReducerType =\r\n    AddPostActionType\r\n    | SendMessageActionType\r\n    | navBarACType\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n\r\n})\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<PostsType>\r\n    messages: Array<DialogType>\r\n    newMessageBody: string\r\n\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Slava'},\r\n        {id: 2, name: 'Borya'},\r\n        {id: 3, name: 'Igor'},\r\n        {id: 4, name: 'Viktor'}],\r\n    messages: [\r\n        {id: 1, message: 'Hi Kaktus'},\r\n        {id: 2, message: 'Hi klaus'},\r\n        {id: 3, message: 'Hi Valeron'},\r\n        {id: 4, message: 'Hi hello'},\r\n        {id: 5, message: 'Hi you'}\r\n    ],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: GlobalReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 5, message: body}],\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nimport {GlobalReducerType} from \"./dialogs-reducer\";\r\n\r\nexport type navBarACType={\r\n    type:'NAV-BAR'\r\n}\r\nexport type NavbarRoutesType={\r\n    path:string\r\n    title:string\r\n}\r\nexport type NavBarType = {\r\n    routes:Array<NavbarRoutesType>\r\n}\r\nconst NAV_BAR='NAV-BAR'\r\nexport const navBarAC=():navBarACType=>({\r\n    type:NAV_BAR\r\n})\r\n\r\nlet initialState:NavBarType = {\r\n    routes: [\r\n        {path: '/', title: 'Profile'},\r\n        {path: '/dialogs', title: 'Message'},\r\n        {path: '/news', title: 'News'},\r\n        {path: '/music', title: 'Music'},\r\n        {path: '/settings', title: 'Settings'},\r\n        {path: '/users', title: 'Users'},\r\n    ]\r\n}\r\n\r\nexport const navbarReducer = (state: NavBarType = initialState, action: GlobalReducerType):NavBarType => {\r\n    switch (action.type) {\r\n        case NAV_BAR:\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import { UserType} from \"../redux/users-reducer\";\r\n\r\n\r\nexport let updateObjectInArray = (items:Array<UserType>,itemId:number,newObjProps:any) => items.map(u => u.id === itemId ? {...u, ...newObjProps} : u)","import {GlobalReducerType} from \"./types/typesUserReducers\";\r\nimport {usersApi} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n\r\n}\r\nexport type DispatchType = (action: GlobalReducerType) => void\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\nexport const usersReducer = (state: UsersType = initialState, action: GlobalReducerType): UsersType => {\r\n    switch (action.type) {\r\n        case 'users/FOLLOW':\r\n            return {...state, users: updateObjectInArray(state.users,action.payload.userId, {followed: true})\r\n            }\r\n        case \"users/UNFOLLOW\":\r\n            return {...state, users: updateObjectInArray(state.users,action.payload.userId, {followed: false})\r\n                }\r\n        case \"users/SET-USER\":\r\n            return {...state, users: action.payload.users}\r\n        case \"users/SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.payload.currentPage}\r\n        case \"users/SET-USERS-TOTAL-COUNT\":\r\n            return {...state, totalUsersCount: action.payload.totalCount}\r\n        case \"users/TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.payload.isFetching}\r\n        case \"users/TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.isFetching\r\n                    ? [...state.followingInProgress, action.payload.userId]\r\n                    : state.followingInProgress.filter(id => id != action.payload.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: 'users/FOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: 'users/UNFOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'users/SET-USER',\r\n        payload: {\r\n            users\r\n        }\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: 'users/SET-CURRENT-PAGE',\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport const setUsersTotalCountAC = (totalCount: number) => {\r\n    return {\r\n        type: 'users/SET-USERS-TOTAL-COUNT',\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\r\n    return {\r\n        type: 'users/TOGGLE-IS-FETCHING',\r\n        payload: {isFetching}\r\n    } as const\r\n}\r\nexport const toggleIsFollowingInProgressAC = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: 'users/TOGGLE-IS-FOLLOWING-PROGRESS',\r\n        payload: {\r\n            isFetching,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch:DispatchType,userId:number,apiMethod:any,actionCreator:any) => {\r\n    dispatch(toggleIsFollowingInProgressAC(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        console.log('if')\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingInProgressAC(false, userId))\r\n}\r\n\r\n//Thunks\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => async (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetchingAC(true))\r\n    dispatch(setCurrentPageAC(currentPage))\r\n    let data = await usersApi.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetchingAC(false))\r\n    dispatch(setUsersAC(data.items))\r\n    dispatch(setUsersTotalCountAC(data.totalCount))\r\n}\r\nexport const follow = (userId: number) => async (dispatch: DispatchType) => {\r\n    followUnfollowFlow(dispatch,userId,usersApi.follow.bind(usersApi),followSuccess)\r\n\r\n}\r\nexport const unfollow = (userId: number) =>\r\n    async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch,userId,usersApi.unfollow.bind(usersApi),unfollowSuccess)\r\n    }\r\n\r\n","import {authApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-USER-DATA\": {\r\n            return {...state, ...action.payload}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type GeneralType = SetUserDataType\r\ntype SetUserDataType = ReturnType<typeof setAuthUserData>\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'auth/SET-USER-DATA',\r\n        payload: {\r\n            id, email, login, isAuth\r\n        }\r\n    }\r\n}\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n   let response = await authApi.getMe()\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => async(dispatch: Dispatch) => {\r\n   let response = await authApi.login(email, password, rememberMe)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData() as any)\r\n            }else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    let response = await authApi.logout()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED-SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                initialized: false\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type GeneralType = SetUserDataType\r\ntype SetUserDataType = ReturnType<typeof initializeSuccess>\r\nexport const initializeSuccess = () => {\r\n    return {\r\n        type: 'INITIALIZED-SUCCESS',\r\n\r\n    }\r\n}\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(initializeSuccess())\r\n        })\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {navbarReducer} from \"./navbar-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    navbar: navbarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunkMiddleware))","import s from './StyledNavLink.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype StyledNavLinkProps = {\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport const StyledNavLink: React.FC<StyledNavLinkProps> = (props) => {\r\n    return (\r\n        <div  className={s.item}>\r\n            <NavLink className={({isActive}) => `${s.item} ${isActive ? s.active : ''}`}\r\n                     to={props.path}>{props.title}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {NavBarType} from \"../../redux/navbar-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType={\r\n    state:NavBarType\r\n}\r\n\r\n\r\nexport type NavBarPropsType=MapStateToPropsType\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>{\r\n    return {\r\n        state:state.navbar\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer=connect(mapStateToProps,mapDispatchToProps)(Navbar)\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {StyledNavLink} from \"./StyledNavLink/StyledNavLink\";\r\nimport {NavBarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar = (props:NavBarPropsType) => {\r\n\r\n    return (\r\n        <div className={s.nav}>\r\n            <nav >\r\n                {props.state.routes.map(({title,path}) => (<React.Fragment key={path+title}><StyledNavLink title={title} path={path}/></React.Fragment>))}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InitialStateType} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderPropsType = {\r\n    auth: InitialStateType\r\n    logoutTC: () => void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src='http://pngimg.com/uploads/magic_hat/small/magic_hat_PNG102.png' alt={'img'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.auth.isAuth ? <div>{props.auth.login} - <button onClick={props.logoutTC}>Log out</button></div> :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType, logoutTC} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype HeaderTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderTypeProps, {}> {\r\n\r\n    render() {\r\n        return <Header {...this.props} auth={this.props.auth}/>\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    auth: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logoutTC: () => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    logoutTC\r\n})(HeaderContainer)\r\n","import React, {useState} from 'react';\r\nimport s from \"./Paginator.module.css\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?:number\r\n}\r\n\r\nexport const Paginator = ({totalUsersCount, pageSize, currentPage, onPageChanged,portionSize = 10,}: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div>\r\n        {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span\r\n                    className={currentPage === p ? s.active : ''}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/risuem-chelovek-rebenku-14.e9b2c5f4.jpg\";","import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    user: UserType\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const User = ({user, follow, unfollow, followingInProgress,}: UsersPropsType) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>\r\n                <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img className={s.userPhoto} src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                         alt='avatar'/>\r\n                </NavLink>\r\n                </div>\r\n                <div>\r\n            {\r\n                user.followed\r\n                    ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  unfollow(user.id)\r\n                              }}>Unfollow</button>\r\n                    : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  follow(user.id)\r\n                              }}>Follow</button>\r\n            }\r\n                </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const Users = ({onPageChanged, users, totalUsersCount, pageSize, currentPage, ...props}: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator onPageChanged={onPageChanged} totalUsersCount={totalUsersCount} pageSize={pageSize}\r\n                       currentPage={currentPage}/>\r\n            <div>\r\n                {users.map(u =>\r\n                    <User key={u.id} user={u} followingInProgress={props.followingInProgress} unfollow={props.unfollow}\r\n                          follow={props.follow}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.81b72309.svg\";","import s from \"../../Users/users.module.css\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader=()=>{\r\n    return(\r\n        <img className={s.preloader} src={preloader}/>\r\n    )\r\n}","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType) =>{\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state:AppStateType) =>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state:AppStateType) =>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:AppStateType) =>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state:AppStateType) =>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) =>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow, getUsersTC,\r\n    setCurrentPageAC,\r\n    toggleIsFollowingInProgressAC,\r\n    unfollow,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/selectors/users-selectors\";\r\n\r\n\r\nexport type MapDispatchToProps = {\r\n    setCurrentPageAC: (el: number) => void\r\n    getUsersTC: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    toggleIsFollowingInProgressAC: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    users: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype UsersPropsType = MapStateToProps & MapDispatchToProps\r\n\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsersTC(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsersTC(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <>\r\n                {this.props.isFetching && <Preloader/>}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPageAC,\r\n    toggleIsFollowingInProgressAC,\r\n    getUsersTC\r\n})(UsersAPIComponent)","import styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FC} from \"react\";\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nconst FormControl = ({input,meta:{touched,error},children}:any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,element,...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n}\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,element,...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export const required = (value:string) =>\r\n    value ? undefined : 'Field is required'\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:string) =>\r\n    value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControl/FormsControl\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport style from \"./../common/FormsControl/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Login'} name={'login'} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input} type={'password'}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {loginTC})(Login)","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    const activateEditMode = () => setEditMode(false)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(true)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    useEffect(() => {\r\n        setStatus(status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <div>\r\n                   <b>Status: </b> <span onDoubleClick={activateEditMode}>{status || '-------'}</span>\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n//\r\n// import React, {ChangeEvent} from \"react\";\r\n//\r\n// type ProfileStatusPropsType = {\r\n//     status: string,\r\n//     updateStatus: (status: string) => void\r\n// }\r\n// type StateType={\r\n//     editMode: boolean,\r\n//     status: string\r\n// }\r\n//\r\n// export class ProfileStatus extends React.Component<any, any> {\r\n//\r\n//     state = {\r\n//         editMode: true,\r\n//         status: this.props.status\r\n//\r\n//     }\r\n//\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         })\r\n//     }\r\n//\r\n//     deactivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: true\r\n//         })\r\n//         this.props.updateStatus(this.state.status)\r\n//     }\r\n//     onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//     }\r\n//     componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<StateType>, snapshot?: any) {\r\n//         if(prevProps.status!== this.props.status){\r\n//             this.setState({\r\n//                 status:this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//\r\n//         return (\r\n//             <>\r\n//                 {this.state.editMode\r\n//                     ? <div>\r\n//                         <span onDoubleClick={this.activateEditMode}>{this.props.status || '-------'}</span>\r\n//                     </div>\r\n//                     : <div>\r\n//                         <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n//                                value={this.state.status}/>\r\n//                     </div>\r\n//                 }\r\n//\r\n//\r\n//             </>\r\n//         )\r\n//     }\r\n//\r\n// }","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {FC} from \"react\";\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport s from '../../common/FormsControl/FormsControls.module.css'\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype PropsType = {\r\n    profile: ProfilePropsType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfilePropsType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (\r\n    {handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className = {s.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {(createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input))}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a\r\n                    job</b>: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile?.contacts).map(key => {\r\n                return <div className={s.contacts}>\r\n                    <div key={key}>\r\n                        <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                    </div>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfilePropsType, PropsType>({form: 'edit-profile'})(ProfileDataForm)","import s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from './ProfileStatus'\r\nimport userPhoto from \"../../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfilePropsType) => Promise<any>\r\n}\r\nexport const ProfileInfo = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const {profile, updateStatus, status, isOwner, savePhoto, saveProfile} = props\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files && e.currentTarget.files.length) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfilePropsType) => {\r\n        saveProfile(formData)\r\n            .then(() => setEditMode(false))\r\n\r\n    }\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img src={profile.photos.large} className={s.mainPhoto}\r\n                     alt='avatar'/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode}/>}\r\n\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactsType) => {\r\n    return <div className={s.contacts}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: any) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div><b>Full name</b>: {profile.fullName}</div>\r\n        <div><b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        {profile.lookingForAJob &&\r\n            <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n        <div><b>About me</b>: {profile.aboutMe}</div>\r\n        <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            // @ts-ignore\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}</div>\r\n    </div>\r\n}\r\n","import s from \"./Post.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string| undefined\r\n    likesCount?: number\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src='https://cdn.pixabay.com/photo/2017/01/26/13/00/mom-2010524__340.png' alt={'logo'}/>\r\n                <span>{props.message}</span>\r\n                <div><span> like {props.likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {MyPostPropsType} from \"./MyPostContainers\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\n\r\ntype AddNewPostFormType = {\r\n    newPostBody: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostPropsType) => {\r\n        let post = props.posts.map(({id, message, likesCount}) => (\r\n            <React.Fragment ><Post key={id} message={message} likesCount={likesCount}/></React.Fragment>))\r\n        // const newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n        let onAddPost = (values: AddNewPostFormType) => {\r\n            props.addPost(values.newPostBody)\r\n        }\r\n\r\n        return (\r\n            <div className={s.myposts}>\r\n                <h3>My Posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {post}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name='newPostBody'\r\n                       placeholder='Enter your post'\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'myPostAddPostForm'})(AddNewPostForm)","import React from \"react\";\r\nimport {addPostAC, RouteType,} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<RouteType>,\r\n    newPostText: string\r\n}\r\ntype MapDispatchToProps = {\r\n    addPost: (newPostBody:string) => void,\r\n\r\n}\r\nexport type MyPostPropsType = MapStateToProps & MapDispatchToProps\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPostBody) => dispatch(addPostAC(newPostBody)),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\n\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainers\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile : (profile: ProfilePropsType) => Promise<any>\r\n}\r\n\r\nexport const Profile = (props: propsType) => {\r\n\r\n    const {isOwner, profile, status, updateStatus, savePhoto,saveProfile} = props\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={isOwner}\r\n                         profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         savePhoto={savePhoto}\r\n            saveProfile={saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {NavigateFunction, Params, useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n\r\n\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file:any) =>void\r\n    saveProfile : (profile: ProfilePropsType) => Promise<any>\r\n\r\n\r\n\r\n}\r\ntype RoutersType = {\r\n    router: {\r\n        location: Location\r\n        params: Params<string>\r\n        navigate: NavigateFunction\r\n    }\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToProps & RoutersType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: any = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('this.props.router.params.userId', this.props.router.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n                         isOwner={!this.props.router.params.userId}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport function withRouter<T>(Component: ComponentType<T>): ComponentType<T & WithRouterType> {\r\n\r\n    const ComponentWithRouterProp = (props: T & WithRouterType) => {\r\n        console.log(\"ComponentWithRouterProp\")\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component {...props} router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype WithRouterType = Location & NavigateFunction & Readonly<Params<string>>;\r\n\r\n// @ts-ignore\r\nexport default compose<React.ComponentType>(connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus,savePhoto,saveProfile\r\n    }), withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import s from \"../Dialogs.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype StyledDialogProps={\r\n    dialog:string\r\n}\r\nexport const Dialog:FC<StyledDialogProps>=(props)=>{\r\n    return (\r\n        <div className={s.dialog}>{props.dialog}</div>\r\n    )\r\n}","import React from 'react';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\nimport {AddMessageFormType} from \"../Dialogs\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name='newMessageBody'\r\n                   placeholder='Enter your message'\r\n                   validate={[required, maxLength50]}/>\r\n\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {UsersPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs = (props: UsersPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(({id, name}) => (<div key={id}>{name}</div>))\r\n    let messageElements = state.messages.map(({id, message}) => (<React.Fragment key={id}>\r\n        <Dialog dialog={message}/>\r\n    </React.Fragment>))\r\n    let newMessageBody = state.newMessageBody\r\n\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType={\r\n    isAuth:boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n\r\n        let {isAuth,...restProps}=props\r\n        console.log(isAuth);\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport {InitialStateType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToProps={\r\n    dialogsPage:InitialStateType\r\n}\r\ntype MapDispatchToProps={\r\n    sendMessage:(newMessageBody:string)=>void\r\n}\r\n\r\nexport type UsersPropsType=MapStateToProps & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchToProps => {\r\n    return {\r\n        sendMessage:(newMessageBody)=>{dispatch(sendMessageAC(newMessageBody))}\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,mapDispatchToProps),withAuthRedirect)(Dialogs)\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, Route, Routes,} from \"react-router-dom\";\r\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport UsersAPIComponent from \"./components/Users/UsersContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {Preloader} from \"./components/common/preloader/Preloader\";\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n\r\n\r\nexport type AppTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass App extends React.Component<AppTypeProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer/>\r\n                    <NavbarContainer/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Routes>\r\n                            <Route path='/*' element={<ProfileContainer/>}/>\r\n                            <Route path='/profile/:userId' element={<ProfileContainer/>}/>\r\n                            <Route path='/dialogs/*' element={<DialogsContainer/>}/>\r\n                            <Route path='/news' element={<h2>News</h2>}/>\r\n                            <Route path='/music' element={<h2>Music</h2>}/>\r\n                            <Route path='/settings' element={<h2>Settings</h2>}/>\r\n                            <Route path='/users' element={<UsersAPIComponent/>}/>\r\n                            <Route path='/login' element={<Login/>}/>\r\n                        </Routes>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        initializeApp\r\n    }))(App)\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from'./redux/redux-store'\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from 'react-redux';\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2tkz-\",\"error\":\"FormsControls_error__32ndD\",\"formSummaryError\":\"FormsControls_formSummaryError__I9ycH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I_CAQ\",\"dialogsItems\":\"Dialogs_dialogsItems__1VEp2\",\"messages\":\"Dialogs_messages__3SXIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__bL0S7\",\"preloader\":\"users_preloader__Xn2Vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StyledNavLink_item__3V37q\",\"active\":\"StyledNavLink_active__2aPHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3rmGo\",\"contacts\":\"ProfileInfo_contacts__sn4XJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3c_Tr\",\"loginBlock\":\"Header_loginBlock__1pyM0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__2twgh\",\"posts\":\"MyPosts_posts__2G5MT\"};"],"sourceRoot":""}