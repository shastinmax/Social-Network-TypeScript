{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/common/FormsControl/FormsControls.module.css","reportWebVitals.ts","api/api.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","assets/images/message.svg","assets/images/user.svg","assets/images/news.svg","assets/images/settings.svg","assets/images/music.svg","assets/images/USERS.svg","redux/navbar-reducer.tsx","utils/object-helpers.ts","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.ts","components/common/Paginator/Paginator.tsx","assets/images/risuem-chelovek-rebenku-14.jpg","components/Users/User.tsx","components/Users/Users.tsx","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","redux/selectors/users-selectors.ts","components/common/hook/selectorHook.ts","components/Users/UsersContainer.tsx","components/common/FormsControl/FormsControl.tsx","utils/validators/validators.tsx","components/Login/Login.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","assets/images/user-profile-svgrepo-com (1).svg","assets/images/like.svg","assets/images/like-red.svg","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Header/Header.tsx","components/Me/Me.tsx","components/Navbar/StyledNavLink/StyledNavLink.tsx","components/Navbar/Navbar.tsx","App.tsx","index.tsx","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/StyledNavLink/StyledNavLink.module.css","components/Users/users.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersApi","getUsers","currentPage","pageSize","get","response","data","unfollow","userId","delete","follow","post","getProfile","console","warn","profileApi","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authApi","email","password","rememberMe","captcha","securityAPI","initialState","posts","id","v1","message","likesCount","newPostText","setStatus","type","payload","getUserProfile","dispatch","a","resultCode","file","photos","getState","auth","stopSubmit","_error","messages","Promise","reject","SEND_MESSAGE","dialogs","name","newMessageBody","NAV_BAR","routes","path","title","image","user","news","music","settings","users","updateObjectInArray","items","itemId","newObjProps","map","u","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPageAC","toggleIsFetchingAC","toggleIsFollowingInProgressAC","getUsersTC","totalCount","followUnfollowFlow","apiMethod","actionCreator","log","bind","login","isAuth","captchaUrl","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","getCaptchaUrl","url","initialized","reducers","combineReducers","profilePage","state","action","newPostBody","filter","p","postId","el","likesCounter","dialogsPage","body","navbar","usersPage","followed","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","className","s","active","e","User","useDispatch","to","userPhoto","src","small","alt","disabled","some","Users","props","Preloader","preloader","selectIsAuth","selectIsDialogs","selectIsApp","selectIsProfile","selectUser","selectNavbar","useAppSelector","useSelector","UsersAPIComponent","useEffect","pageNumber","FormControl","input","meta","touched","error","children","hasError","styles","formControl","Textarea","restProps","child","element","Input","createField","placeholder","validators","component","text","Field","validate","required","value","undefined","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","handleSubmit","onSubmit","style","formSummaryError","Login","ProfileStatus","editMode","setEditMode","statusEdit","onDoubleClick","stroke","fill","stroke-width","version","viewBox","height","width","xmlns","d","onChange","currentTarget","autoFocus","onBlur","ProfileDataFormReduxForm","Object","keys","contacts","key","ProfileInfo","avatar","profileImgBtn","large","btnEdit","profileLoad","files","profileInform","initialValues","goToEditMode","Contact","contactTitle","contactValue","des","ProfileData","isOwner","descr","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Post","onHandlerLike","updateLikesCounter","item","postImgMess","userPost","postLike","like","likeRed","MyPosts","React","memo","Fragment","myposts","postTitle","AddNewPostFormRedux","values","maxLength10","postTextarea","btnPost","Profile","ProfileContainer","useParams","Dialog","dialog","maxLength50","Dialogs","dialogsElements","messageElements","dialogsItems","AddMessageFormRedux","Header","header","header_title","loginBlock","headerPhoto","header_name_profile","button_header","Me","StyledNavLink","isActive","routesImg","Navbar","nav","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,kC,oBCAjCD,EAAOC,QAAU,CAAC,IAAM,sB,mBCAxBD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,cAAgB,mCAAmC,SAAW,8BAA8B,UAAY,+BAA+B,cAAgB,mCAAmC,QAAU,6BAA6B,YAAc,iCAAiC,MAAQ,2BAA2B,OAAS,4BAA4B,IAAM,yBAAyB,WAAa,kC,+DCA3bD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,SAAW,kC,4DCa/JC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,yDCNRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAINC,EAAW,CACpBC,SADoB,WACsC,IAAjDC,EAAgD,uDAA1B,EAAGC,EAAuB,uDAAJ,GACjD,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAAaf,MAAK,SAAAiB,GAAQ,OAAIA,EAASC,SAElGC,SAJoB,SAIXC,GACL,OAAOd,EAASe,OAAT,iBAA0BD,KAErCE,OAPoB,SAObF,GACH,OAAOd,EAASiB,KAAT,iBAAwBH,KAEnCI,WAVoB,SAUTJ,GAEP,OADAK,QAAQC,KAAK,6CACNC,EAAWH,WAAWJ,KAGxBO,EAAa,CACtBH,WADsB,SACXJ,GACP,OAAOd,EAASU,IAAI,WAAaI,IAErCQ,UAJsB,SAIZR,GACN,OAAOd,EAASU,IAAT,0BAAgCI,KAE3CS,aAPsB,SAOTC,GACT,OAAOxB,EAASyB,IAAI,kBAAmB,CAACD,YAE5CE,UAVsB,SAUZC,GACN,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,QAASH,GAClB3B,EAASyB,IAAI,iBAAkBG,EAAU,CAC5CvB,QAAS,CACL,eAAgB,0BAI5B0B,YAnBsB,SAmBVC,GAER,OAAOhC,EAASyB,IAAI,UAAWO,KAG1BC,EAAU,WAEf,OAAOjC,EAASU,IAAI,YAFfuB,EAAU,SAIbC,EAAeC,EAAkBC,EAAqBC,GACxD,OAAOrC,EAASiB,KAAK,aAAc,CAACiB,QAAOC,WAAUC,aAAYC,aAL5DJ,EAAU,WAQf,OAAOjC,EAASe,OAAO,eAQlBuB,EAAc,WAEnB,OAAOtC,EAASU,IAAI,6B,iBC5CxB6B,EAA4B,CAC5BC,MAAO,CACH,CAACC,GAAIC,cAAMC,QAAS,iBAAkBC,WAAY,GAClD,CAACH,GAAIC,cAAMC,QAAS,UAAWC,WAAY,GAC3C,CAACH,GAAIC,cAAMC,QAAS,iBAAkBC,WAAY,GAClD,CAACH,GAAIC,cAAMC,QAAS,cAAeC,WAAY,IAEnDC,YAAa,WACbb,QAAS,KACTR,OAAQ,IAyDCsB,EAAY,SAACtB,GACtB,MAAO,CACHuB,KAAM,aACNC,QAAS,CACLxB,YA2BCyB,EAAiB,SAACnC,GAAD,8CAAoB,WAAOoC,GAAP,eAAAC,EAAA,sEACzB7C,EAASY,WAAWJ,GADK,OAC1CH,EAD0C,OAE9CuC,EAtCO,CACHH,KAAM,mBACNf,QAoCoBrB,EAASC,OAFa,2CAApB,uDAIjBU,EAAY,SAACR,GAAD,8CAAoB,WAAOoC,GAAP,eAAAC,EAAA,sEACpB9B,EAAWC,UAAUR,GADD,OACrCH,EADqC,OAEzCuC,EAASJ,EAAUnC,EAASC,OAFa,2CAApB,uDAIZW,EAAe,SAACC,GAAD,8CAAoB,WAAO0B,GAAP,SAAAC,EAAA,sEACvB9B,EAAWE,aAAaC,GADD,OAEX,IAFW,OAE/BZ,KAAKwC,YACdF,EAASJ,EAAUtB,IAHqB,2CAApB,uDAMfE,EAAY,SAAC2B,GAAD,8CAAe,WAAOH,GAAP,eAAAC,EAAA,sEACf9B,EAAWK,UAAU2B,GADN,OAEH,KAD7B1C,EADgC,QAEvBC,KAAKwC,YACdF,EA/BG,CACHH,KAAM,qBACNO,OA6B0B3C,EAASC,KAAKA,KAAK0C,SAHb,2CAAf,uDAMZvB,EAAc,SAACC,GAAD,8CAA+B,WAAOkB,EAAwBK,GAA/B,iBAAAJ,EAAA,6DAChDrC,EAASyC,IAAWC,KAAKf,GADuB,SAEjCpB,EAAWU,YAAYC,GAFU,UAGrB,KAD7BrB,EAFkD,QAGzCC,KAAKwC,WAHoC,gBAKlDF,EAASD,EAAenC,IAL0B,8BAQlDoC,EAASO,YAAW,eAAgB,CAACC,OAAQ/C,EAASC,KAAK+C,SAAS,MARlB,kBAS3CC,QAAQC,OAAOlD,EAASC,KAAK+C,SAAS,KATK,4CAA/B,yDCnHrBG,EAAe,eAgBjBvB,EAAiC,CACjCwB,QAAS,CACL,CAACtB,GAAI,EAAGuB,KAAM,SACd,CAACvB,GAAI,EAAGuB,KAAM,SACd,CAACvB,GAAI,EAAGuB,KAAM,QACd,CAACvB,GAAI,EAAGuB,KAAM,WAClBL,SAAU,CACN,CAAClB,GAAI,EAAGE,QAAS,aACjB,CAACF,GAAI,EAAGE,QAAS,YACjB,CAACF,GAAI,EAAGE,QAAS,cACjB,CAACF,GAAI,EAAGE,QAAS,YACjB,CAACF,GAAI,EAAGE,QAAS,WAErBsB,eAAgB,ICvDL,MAA0B,oCCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,qCCA1B,MAA0B,kCCA1B,MAA0B,kCCkBnCC,EAAQ,UAKV3B,EAA0B,CAC1B4B,OAAQ,CACJ,CAACC,KAAM,IAAKC,MAAO,UAAUC,MAAMC,GACnC,CAACH,KAAM,WAAYC,MAAO,UAAUC,MAAM3B,GAC1C,CAACyB,KAAM,QAASC,MAAO,OAAOC,MAAME,GACpC,CAACJ,KAAM,SAAUC,MAAO,QAAQC,MAAMG,GACtC,CAACL,KAAM,YAAaC,MAAO,WAAWC,MAAMI,GAC5C,CAACN,KAAM,SAAUC,MAAO,QAAQC,MAAMK,KC3BnCC,EAAsB,SAACC,EAAsBC,EAAcC,GAArC,OAAyDF,EAAMG,KAAI,SAAAC,GAAC,OAAIA,EAAExC,KAAOqC,EAAT,2BAAsBG,GAAMF,GAAeE,MCsBhJ1C,EAA0B,CAC1BoC,MAAO,GACPlE,SAAU,GACVyE,gBAAiB,GACjB1E,YAAa,EACb2E,YAAY,EACZC,oBAAqB,IA8BZC,EAAgB,SAACvE,GAC1B,MAAO,CACHiC,KAAM,eACNC,QAAS,CACLlC,YAICwE,EAAkB,SAACxE,GAC5B,MAAO,CACHiC,KAAM,iBACNC,QAAS,CACLlC,YAYCyE,EAAmB,SAAC/E,GAC7B,MAAO,CACHuC,KAAM,yBACNC,QAAS,CACLxC,iBAYCgF,EAAqB,SAACL,GAC/B,MAAO,CACHpC,KAAM,2BACNC,QAAS,CAACmC,gBAGLM,EAAgC,SAACN,EAAqBrE,GAC/D,MAAO,CACHiC,KAAM,qCACNC,QAAS,CACLmC,aACArE,YAIC4E,EAAa,SAAClF,EAAqBC,GAAtB,8CAA2C,WAAOyC,GAAP,eAAAC,EAAA,6DACjED,EAASsC,GAAmB,IAC5BtC,EAASqC,EAAiB/E,IAFuC,SAGhDF,EAASC,SAASC,EAAaC,GAHiB,OAG7DG,EAH6D,OAIjEsC,EAASsC,GAAmB,IAC5BtC,EA3CO,CACHH,KAAM,iBACNC,QAAS,CACL2B,MAwCY/D,EAAKiE,SACzB3B,EA5BO,CACHH,KAAM,8BACNC,QAAS,CACL2C,WAyBsB/E,EAAK+E,cAN8B,2CAA3C,uDAQpBC,EAAkB,uCAAG,WAAO1C,EAAsBpC,EAAc+E,EAAcC,GAAzD,SAAA3C,EAAA,6DACvBD,EAASuC,GAA8B,EAAM3E,IADtB,SAEF+E,EAAU/E,GAFR,OAGU,IAHV,OAGVF,KAAKwC,aACdjC,QAAQ4E,IAAI,MACZ7C,EAAS4C,EAAchF,KAE3BoC,EAASuC,GAA8B,EAAO3E,IAPvB,2CAAH,4DAYXE,EAAS,SAACF,GAAD,8CAAoB,WAAOoC,GAAP,SAAAC,EAAA,sDACtCyC,EAAmB1C,EAASpC,EAAOR,EAASU,OAAOgF,KAAK1F,GAAU+E,GAD5B,2CAApB,uDAITxE,EAAW,SAACC,GAAD,8CACpB,WAAOoC,GAAP,SAAAC,EAAA,sDACIyC,EAAmB1C,EAASpC,EAAOR,EAASO,SAASmF,KAAK1F,GAAUgF,GADxE,2CADoB,uDC5HpB/C,EAAe,CACfE,GAAI,KACJP,MAAO,KACP+D,MAAO,KACPC,QAAQ,EACRC,WAAY,MAsBHC,EAAkB,SAAC3D,EAAmBP,EAAsB+D,EAAsBC,GAC3F,MAAO,CACHnD,KAAM,qBACNC,QAAS,CACLP,KAAIP,QAAO+D,QAAOC,YAIjBG,EAAuB,SAACF,GACjC,MAAO,CACHpD,KAAM,kBACNC,QAAS,CAACmD,gBAOLG,EAAkB,yDAAM,WAAOpD,GAAP,uBAAAC,EAAA,sEACZlB,IADY,OAEA,KAD7BtB,EAD6B,QAEpBC,KAAKwC,aAAmB,EACRzC,EAASC,KAAKA,KAAlC6B,EAD2B,EAC3BA,GAAIP,EADuB,EACvBA,MAAO+D,EADgB,EAChBA,MAChB/C,EAASkD,EAAgB3D,EAAIP,EAAO+D,GAAO,KAJd,2CAAN,uDA4BlBM,GAAgB,WACzB,8CAAO,WAAOrD,GAAP,iBAAAC,EAAA,+EAEwBb,IAFxB,OAEO3B,EAFP,OAGOwF,EAAaxF,EAASC,KAAK4F,IACjCtD,EAASmD,EAAqBF,IAJ/B,gDAMChF,QAAQ4E,IAAR,kDAND,yDAAP,uD,oBCnFAxD,GAAe,CACfkE,aAAa,GCGbC,GAAWC,YAAgB,CAC3BC,YbwB0B,WAA+E,IAA9EC,EAA6E,uDAAxDtE,EAAcuE,EAA0C,uCACxG,OAAQA,EAAO/D,MACX,IAAK,WACD,OAAO,2BACA8D,GADP,IAEIrE,MAAM,GAAD,mBAAMqE,EAAMrE,OAAZ,CAAmB,CACpBC,GAAIC,cACJC,QAASmE,EAAOC,YAChBnE,WAAY,KAEhBC,YAAa,KAErB,IAAK,mBACD,OAAO,2BACAgE,GADP,IACc7E,QAAS8E,EAAO9E,UAElC,IAAK,aACD,OAAO,2BACA6E,GADP,IACcrF,OAAQsF,EAAO9D,QAAQxB,SAEzC,IAAK,cACD,OAAO,2BACAqF,GADP,IACcrE,MAAOqE,EAAMrE,MAAMwE,QAAO,SAAAC,GAAC,OAAIA,EAAExE,KAAOqE,EAAO9D,QAAQkE,YAEzE,IAAK,qBACD,OAAO,2BACAL,GADP,IACc7E,QAAQ,2BAAK6E,EAAM7E,SAAZ,IAAqBsB,OAAQwD,EAAOxD,WAE7D,IAAK,uBACD,OAAO,2BACAuD,GADP,IAEIrE,MAAOqE,EAAMrE,MAAMwC,KAAI,SAAAmC,GAAE,OAAIA,EAAG1E,KAAOqE,EAAO9D,QAAQP,GAAzB,2BACtB0E,GADsB,IAEzBvE,WAAYkE,EAAO9D,QAAQoE,eAC3BD,OAGZ,QACI,OAAON,Ia7DfQ,YZ6C0B,WAA0F,IAAzFR,EAAwF,uDAA9DtE,EAAcuE,EAAgD,uCACnH,OAAQA,EAAO/D,MACX,KAAKe,EACD,IAAIwD,EAAOR,EAAO7C,eAClB,OAAO,2BACA4C,GADP,IAEIlD,SAAS,GAAD,mBAAMkD,EAAMlD,UAAZ,CAAsB,CAAClB,GAAI,EAAGE,QAAS2E,OAGvD,QACI,OAAOT,IYtDfU,OLoByB,WAA6E,IAA5EV,EAA2E,uDAAvDtE,EAAcuE,EAAyC,uCACrG,OAAQA,EAAO/D,MACX,KAAKmB,EAEL,QACI,OAAO2C,IKxBfW,UHkBwB,WAA4E,IAA3EX,EAA0E,uDAAvDtE,EAAcuE,EAAyC,uCACnG,OAAQA,EAAO/D,MACX,IAAK,eACD,OAAO,2BAAI8D,GAAX,IAAkBlC,MAAOC,EAAoBiC,EAAMlC,MAAMmC,EAAO9D,QAAQlC,OAAQ,CAAC2G,UAAU,MAE/F,IAAK,iBACD,OAAO,2BAAIZ,GAAX,IAAkBlC,MAAOC,EAAoBiC,EAAMlC,MAAMmC,EAAO9D,QAAQlC,OAAQ,CAAC2G,UAAU,MAE/F,IAAK,iBACD,OAAO,2BAAIZ,GAAX,IAAkBlC,MAAOmC,EAAO9D,QAAQ2B,QAC5C,IAAK,yBACD,OAAO,2BAAIkC,GAAX,IAAkBrG,YAAasG,EAAO9D,QAAQxC,cAClD,IAAK,8BACD,OAAO,2BAAIqG,GAAX,IAAkB3B,gBAAiB4B,EAAO9D,QAAQ2C,aACtD,IAAK,2BACD,OAAO,2BAAIkB,GAAX,IAAkB1B,WAAY2B,EAAO9D,QAAQmC,aACjD,IAAK,qCACD,OAAO,2BACA0B,GADP,IAEIzB,oBAAqB0B,EAAO9D,QAAQmC,WAAf,sBACX0B,EAAMzB,qBADK,CACgB0B,EAAO9D,QAAQlC,SAC9C+F,EAAMzB,oBAAoB4B,QAAO,SAAAvE,GAAE,OAAIA,GAAMqE,EAAO9D,QAAQlC,YAE1E,QACI,OAAO+F,IGzCfrD,KFYuB,WAAoF,IAAnFqD,EAAkF,uDAAxDtE,EAAcuE,EAA0C,uCAC1G,OAAQA,EAAO/D,MACX,IAAK,qBACL,IAAK,kBACD,OAAO,2BAAI8D,GAAUC,EAAO9D,SAEhC,QACI,OAAO6D,IElBfa,KAAMC,KACNC,IDPsB,WAAoF,IAAnFf,EAAkF,uDAAxDtE,GAAcuE,EAA0C,uCACzG,OAAQA,EAAO/D,MACX,IAAK,sBACD,OAAO,2BACA8D,GADP,IAEIJ,aAAa,IAGrB,QACI,OAAOI,MCGRgB,GAAQC,YAAYpB,GAAUqB,YAAgBC,O,qGCZ5CC,GAAY,SAAC,GAGtB,IAHqH,IAA9F/C,EAA6F,EAA7FA,gBAAiBzE,EAA4E,EAA5EA,SAAUD,EAAkE,EAAlEA,YAAa0H,EAAqD,EAArDA,cAAqD,IAAvCC,mBAAuC,MAAzB,GAAyB,EAChHC,EAAaC,KAAKC,KAAKpD,EAAkBzE,GACzC8H,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAP0E,EAQ5EQ,mBAAS,GARmE,oBAQ/GC,EAR+G,KAQhGC,EARgG,KAShHC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAE7C,OAAO,iCACFS,EAAgB,GACb,yBAAQI,QAAS,WACbH,EAAiBD,EAAgB,IADrC,kBAIHL,EACIvB,QAAO,SAAAC,GAAC,OAAIA,GAAK6B,GAAyB7B,GAAK8B,KAC/C/D,KAAI,SAACiC,GACF,OAAO,uBACHgC,UAAWzI,IAAgByG,EAAIiC,KAAEC,OAAS,GAE1CH,QAAS,SAACI,GACNlB,EAAcjB,IAJf,SAKCA,GAHCA,MAKhByB,EAAeE,GACZ,yBAAQI,QAAS,WACbH,EAAiBD,EAAgB,IADrC,sB,oBCxCG,OAA0B,uDCY5BS,GAAO,SAAC,GAAkD,IAAjD9E,EAAgD,EAAhDA,KAAMa,EAA0C,EAA1CA,oBAClBlC,EAAWoG,eASjB,OACI,+BACI,iCACI,kCACA,+BACA,eAAC,KAAD,CAASC,GAAI,YAAchF,EAAK9B,GAAhC,SACI,sBAAKwG,UAAWC,KAAEM,UAAWC,IAA2B,OAAtBlF,EAAKjB,OAAOoG,MAAiBnF,EAAKjB,OAAOoG,MAAQF,GAC9EG,IAAI,eAGb,+BAEApF,EAAKkD,SACC,yBAAQmC,SAAUxE,EAAoByE,MAAK,SAAApH,GAAE,OAAIA,IAAO8B,EAAK9B,MACrDuG,QAAS,WAnBT,IAACvG,IAoBqB8B,EAAK9B,GAnBjDS,EAASrC,EAAS4B,KAiBJ,sBAIA,yBAAQmH,SAAUxE,EAAoByE,MAAK,SAAApH,GAAE,OAAIA,IAAO8B,EAAK9B,MACrDuG,QAAS,WA1BX,IAACvG,IA2BqB8B,EAAK9B,GA1B/CS,EAASlC,EAAOyB,KAwBF,yBAON,kCACI,kCACI,+BAAM8B,EAAKP,OACX,+BAAMO,EAAK/C,YAEf,kCACI,+BAAM,uBACN,+BAAM,gCCrCjBsI,GAAQ,SAAC,GAA8F,IAA7F5B,EAA4F,EAA5FA,cAAevD,EAA6E,EAA7EA,MAAOO,EAAsE,EAAtEA,gBAAiBzE,EAAqD,EAArDA,SAAUD,EAA2C,EAA3CA,YAAgBuJ,EAA2B,qFAE/G,OACI,iCACI,eAAC,GAAD,CAAW7B,cAAeA,EAAehD,gBAAiBA,EAAiBzE,SAAUA,EAC1ED,YAAaA,IACxB,+BACKmE,EAAMK,KAAI,SAAAC,GAAC,OACR,eAAC,GAAD,CAAiBV,KAAMU,EAAGG,oBAAqB2E,EAAM3E,qBAA1CH,EAAExC,aCxBlB,OAA0B,sCCI5BuH,GAAU,WACnB,OACI,sBAAKf,UAAWC,KAAEe,UAAWR,IAAKQ,MCgB7BC,GAAe,SAACrD,GAAD,OAAyBA,EAAMrD,MAC9C2G,GAAkB,SAACtD,GAAD,OAAyBA,EAAMQ,aACjD+C,GAAc,SAACvD,GAAD,OAAyBA,EAAMe,KAC7CyC,GAAkB,SAACxD,GAAD,OAAyBA,EAAMD,aACjD0D,GAAY,SAACzD,GAAD,OAAyBA,EAAMW,WAC3C+C,GAAc,SAAC1D,GAAD,OAAyBA,EAAMU,QCxB7CiD,GAAqDC,KCMrDC,GAAmB,WAC5B,IAAMxH,EAAWoG,eADgB,EAEoDkB,GAAeF,IAA7F9J,EAF0B,EAE1BA,YAAaC,EAFa,EAEbA,SAAS0E,EAFI,EAEJA,WAAWD,EAFP,EAEOA,gBAAgBP,EAFvB,EAEuBA,MAAMS,EAF7B,EAE6BA,oBAC9DuF,qBAAU,WACNzH,EAASwC,EAAWlF,EAAaC,MACnC,IAME,OAAO,+BACH,uCACK0E,GAAc,eAAC,GAAD,IACf,eAAC,GAAD,CAAOD,gBAAiBA,EACjBzE,SAAUA,EACVD,YAAaA,EACb0H,cAVE,SAAC0C,GACnB1H,EAASwC,EAAWkF,EAAYnK,KAUhBkE,MAAOA,EACP9D,SAAUA,EACVG,OAAQA,EACRoE,oBAAqBA,U,wCCxBtCyF,GAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAvCC,KAAMC,EAAiC,EAAjCA,QAAQC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,SACvCC,EAAWH,GAAWC,EAC5B,OACI,uBAAKhC,UAAWmC,KAAOC,YAAc,KAAOF,EAAWC,KAAOH,MAAQ,IAAtE,UACI,+BACKC,IAEJC,GAAY,gCAAOF,QAKnBK,GAAW,SAACvB,GAAe,IAC7Be,EAAyCf,EAAzCe,MAA4BS,GAAaxB,EAAnCgB,KAAmChB,EAA9ByB,MAA8BzB,EAAxB0B,QADW,aACa1B,EADb,qCAEnC,OAAO,gBAAC,GAAD,2BAAiBA,GAAjB,kBAAyB,qDAAce,GAAWS,IAAlD,SAEEG,GAAQ,SAAC3B,GAAe,IAC1Be,EAAyCf,EAAzCe,MAA4BS,GAAaxB,EAAnCgB,KAAmChB,EAA9ByB,MAA8BzB,EAAxB0B,QADQ,aACgB1B,EADhB,qCAEhC,OAAO,gBAAC,GAAD,2BAAiBA,GAAjB,kBAAyB,kDAAWe,GAAWS,IAA/C,SAGJ,SAASI,GAAyCC,EACA5H,EACA6H,EACAC,GACwB,IAAxB/B,EAAuB,uDAAf,GAAIgC,EAAW,uDAAJ,GACxE,OAAO,iCACH,eAACC,GAAA,EAAD,aAAOJ,YAAaA,EAAa5H,KAAMA,EAChCiI,SAAUJ,EACVC,UAAWA,GACP/B,IAJR,IAKCgC,KCrCL,IAAMG,GAAW,SAACC,GAAD,OACpBA,OAAQC,EAAY,qBAEXC,GAAmB,SAACC,GAAD,OAAsB,SAACH,GAAD,OAClDA,GAASA,EAAMI,OAASD,EAAxB,wBAAqDA,EAArD,iBAA2EF,ICmCzEI,GAAiBC,aAAkD,CAAC/E,KAAM,SAAzD+E,EAzB2F,SAAC,GAIO,IAHHC,EAGE,EAHFA,aACAzB,EAEE,EAFFA,MACA9E,EACE,EADFA,WAEnH,OACI,wBAAMwG,SAAUD,EAAhB,UACKf,GAAqC,QAAS,QAAS,CAACO,IAAWR,IACnEC,GAAqC,WAAY,WAAY,CAACO,IAAWR,GAAO,CAAC3I,KAAM,aACvF4I,QAAqCS,EAAW,aAAc,GAAIV,GAAO,CAAC3I,KAAM,YAAa,eAE7FoD,GAAc,sBAAKsD,IAAKtD,IACxBA,GAAcwF,GAAqC,qBAAsB,UAAW,CAACO,IAAWR,GAAO,IAEvGT,GAAS,sBAAKhC,UAAW2D,KAAMC,iBAAtB,SACL5B,IAEL,+BACI,oDAeH6B,GAAQ,WACjB,IAAM5J,EAAWoG,eADM,EAEMkB,GAAeN,IAArC/D,EAFgB,EAEhBA,WAIP,OANuB,EAEJD,OAKR,eAAC,KAAD,CAAUqD,GAAI,MAIrB,iCACI,wCACA,eAACiD,GAAD,CAAgBG,SAVP,SAAC/K,GdmBD,IAACM,EAAeC,EAAkBC,EAAqBC,EclBpEa,GdkBchB,EclBCN,EAASM,MdkBKC,EclBEP,EAASO,SdkBOC,EclBGR,EAASQ,WdkBSC,EclBGT,EAASS,QdmBpF,uCAAO,WAAOa,GAAP,iBAAAC,EAAA,+EAEwBlB,EAAcC,EAAOC,EAAUC,EAAYC,GAFnE,UAGkC,KAD3B1B,EAFP,QAGcC,KAAKwC,WAHnB,gCAIWF,EAASoD,KAJpB,iCAMsC,KAA7B3F,EAASC,KAAKwC,WANvB,kCAOeF,EAASqD,MAPxB,gCASe5D,EAAUhC,EAASC,KAAK+C,SAAS4I,OAAS,EAAI5L,EAASC,KAAK+C,SAAS,GAAK,iCAChFT,EAASO,YAAW,QAAS,CAACC,OAAQf,KAV/C,0DAcCxB,QAAQ4E,IAAR,8BAdD,0DAAP,yDcV4CI,WAAYA,Q,oBCrD/C4G,GAAgB,SAAChD,GAAmC,IAAD,EAE5BpB,oBAAkB,GAFU,oBAErDqE,EAFqD,KAE3CC,EAF2C,OAGhCtE,mBAAiBoB,EAAMvI,QAHS,oBAGrDA,EAHqD,KAG7CsB,EAH6C,KAe5D,OAJA6H,qBAAU,WACN7H,EAAUtB,KACX,CAACuI,EAAMvI,SAGN,qCACKwL,EACK,iCACC,uBAAM/D,UAAWC,KAAE1H,OAAnB,sBADD,IAC4C,wBAAMyH,UAAWC,KAAEgE,WAAYC,cAfhE,kBAAMF,GAAY,IAee,UAAiEzL,GAAU,UAA3E,IAAsF,sBAAK4L,OAAO,eAAeC,KAAK,eAAeC,eAAa,IAAIC,QAAQ,MAAMC,QAAQ,YAAYC,OAAO,MAAMC,MAAM,MAAMC,MAAM,6BAAjI,SAA8J,uBAAMC,EAAE,uJAExS,+BACE,wBAAOC,SAbA,SAACzE,GAAD,OAAsCtG,EAAUsG,EAAE0E,cAAc3B,QAatC4B,WAAW,EAAMC,OAjBvC,WACvBf,GAAY,GACZlD,EAAMxI,aAAaC,IAgBA2K,MAAO3K,SC2BrByM,GAA2BxB,aAAuC,CAAC/E,KAAM,gBAA9C+E,EA7C2C,SAAC,GAC5C,IAAnCC,EAAkC,EAAlCA,aAAc1K,EAAoB,EAApBA,QAASiJ,EAAW,EAAXA,MACxB,OACI,+BACI,wBAAM0B,SAAUD,EAAhB,UACI,+BACI,6CAEHzB,GAAS,sBAAKhC,UAAWC,KAAE2D,iBAAlB,SACL5B,IAGL,iCACI,2CADJ,KACwBU,GAA6B,YAAa,WAAY,GAAID,OAElF,iCACI,mDACYC,GAAY,GAAI,iBAAkB,GAAID,GAAO,CAAC3I,KAAM,gBAGpE,iCACI,wDADJ,IAEK4I,GAAY,yBAA0B,4BAA6B,GAAIL,OAI5E,iCACI,0CADJ,IAEKK,GAAY,WAAY,UAAW,GAAIL,OAE5C,iCACI,0CADJ,KACsB4C,OAAOC,KAAP,OAAYnM,QAAZ,IAAYA,OAAZ,EAAYA,EAASoM,UAAUpJ,KAAI,SAAAqJ,GACrD,OAAO,sBAAKpF,UAAWC,KAAEkF,SAAlB,SACH,+BACI,+BAAIC,EAAJ,KAAW1C,GAAY0C,EAAK,YAAcA,EAAK,GAAI3C,QAD7C2C,mBC5BrBC,GAAc,SAACvE,GACxB,IAAM7G,EAAWoG,eAD4B,EAEbX,oBAAS,GAFI,oBAEtCqE,EAFsC,KAE5BC,EAF4B,KAItCjL,EAAiE+H,EAAjE/H,QAAST,EAAwDwI,EAAxDxI,aAAcC,EAA0CuI,EAA1CvI,OAAQE,EAAkCqI,EAAlCrI,UAAWK,EAAuBgI,EAAvBhI,YAAajB,EAAUiJ,EAAVjJ,OAC9D,IAAKkB,EACD,OAAO,eAAC,GAAD,IAoBX,OADAb,QAAQ4E,MAEJ,+BACI,uBAAKkD,UAAWC,KAAEqF,OAAlB,UACI,uBAAKtF,UAAWC,KAAEsF,cAAlB,UACI,sBAAK/E,IAAKzH,EAAQsB,OAAOmL,OAASjF,GAAWP,UAAWC,KAAEM,UACrDG,IAAI,YACP7I,GAAU,yBAAQmI,UAAWC,KAAEwF,QAAS1F,QAbpC,WAClBiE,GAAaD,IAYW,kBAEZ,yBAAO/D,UAAWC,KAAEyF,YAApB,yBACI,wBAAO5L,KAAK,OAAO8K,SA1BX,SAACzE,GACrBA,EAAE0E,cAAcc,OAASxF,EAAE0E,cAAcc,MAAMrC,QAC/CrJ,EAASxB,EAAU0H,EAAE0E,cAAcc,MAAM,cA4BrC,uBAAK3F,UAAWC,KAAEkF,SAAlB,UACI,qBAAInF,UAAWC,KAAE2F,cAAjB,8BACA,eAAC,GAAD,CAAerN,OAAQA,EAAQD,aAAcA,IAC7C,+BAAOyL,EACH,eAACiB,GAAD,CAA0Ba,cAAe9M,EAASA,QAASA,EAAS2K,SA5BvE,SAAC/K,GACdsB,EAASnB,EAAYH,IACrBqL,GAAY,MA2BI,eAAC,GAAD,CAAajL,QAASA,EAAS+M,aAtB9B,WACjB9B,GAAY,iBAmCP+B,GAAU,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,aACnC,OAAO,iCAAM,uBAAMjG,UAAWC,KAAEiG,IAAnB,SAAyBF,IAA/B,KAAsDC,MAG3DE,GAAc,SAAC,GAA2C,IAA1CpN,EAAyC,EAAzCA,QAASqN,EAAgC,EAAhCA,QAASN,EAAuB,EAAvBA,aACpC,OAAO,iCACFM,GAAW,+BACR,yBAAQrG,QAAS+F,EAAjB,oBAEJ,iCAAK,uBAAM9F,UAAWC,KAAEoG,MAAnB,uBAAL,IAAiDtN,EAAQuN,YACzD,iCAAK,uBAAMtG,UAAWC,KAAEoG,MAAnB,+BAAL,IAAyDtN,EAAQwN,eAAiB,MAAQ,QACzFxN,EAAQwN,gBACL,iCAAK,wDAAL,KAAqCxN,EAAQyN,6BACjD,iCAAK,uBAAMxG,UAAWC,KAAEoG,MAAnB,sBAAL,IAAgDtN,EAAQ0N,WACxD,iCAAK,uBAAMzG,UAAWC,KAAEoG,MAAnB,wBAAL,IAAkDpB,OAAOC,KAAKnM,EAAQoM,UAAUpJ,KAAI,SAAAqJ,GAChF,OAAO,+BAE2B,OAA1BrM,EAAQoM,SAASC,IACd,eAAC,GAAD,CAASY,aAAcZ,EAAKa,aAAclN,EAAQoM,SAASC,MAHrDA,a,wCC1Fd,OAA0B,yDCA1B,OAA0B,iCCA1B,OAA0B,qCCc5BsB,GAA0B,SAAC5F,GAAW,IACxCpH,EAA0BoH,EAA1BpH,QAASC,EAAiBmH,EAAjBnH,WAAWH,EAAMsH,EAANtH,GACrBS,EAASoG,eACTsG,EAAgB,WAClB1M,EhC8F0B,SAACT,EAAY2E,GAC3C,MAAO,CACHrE,KAAM,uBACNC,QAAS,CACLP,KAAI2E,iBgClGCyI,CAAmBpN,EAAIG,EAAW,KAE/C,OACI,+BACI,uBAAKqG,UAAWC,KAAE4G,KAAlB,UACI,uBAAK7G,UAAWC,KAAE6G,YAAlB,UACI,sBAAKtG,IAAKuG,GAAUrG,IAAK,SACzB,gCAAOhH,OAEX,sBAAKsG,UAAWC,KAAE+G,SAAlB,SACI,kCACKrN,EAAa,EACR,sBAAKoG,QAAS4G,EAAe3G,UAAWC,KAAEgH,KAAMzG,IAAK0G,GAASxG,IAAI,SAClE,sBAAKX,QAAS4G,EAAe3G,UAAWC,KAAEgH,KAAMzG,IAAKyG,GAAMvG,IAAI,SACpE/G,aClBZwN,GAAUC,IAAMC,MAAK,WAC1B,IAAMpN,EAAWoG,eAGbrI,EAFYuJ,GAAeH,IAAxB7H,MAEUwC,KAAI,gBAAEvC,EAAF,EAAEA,GAAIE,EAAN,EAAMA,QAASC,EAAf,EAAeA,WAAf,OACjB,eAAC,IAAM2N,SAAP,UACI,eAAC,GAAD,CAAe5N,QAASA,EAASC,WAAYA,EAAYH,GAAIA,GAAlDA,QAKnB,OACI,uBAAKwG,UAAWC,KAAEsH,QAAlB,UACI,qBAAIvH,UAAWC,KAAEuH,UAAjB,sBACA,eAACC,GAAD,CAAqB/D,SANb,SAACgE,GACbzN,EjCwDD,CACHH,KAAM,WACNgE,YiC1DuB4J,EAAO5J,iBAMtB,sBAAKkC,UAAWC,KAAE1G,MAAlB,SACKvB,UAMf2P,GAAcvE,GAAiB,IAgB/BqE,GAAsBjE,aAA8B,CAAC/E,KAAM,qBAArC+E,EAd4C,SAAC1C,GACrE,OACI,wBAAM4C,SAAU5C,EAAM2C,aAAtB,UACI,+BACI,eAACV,GAAA,EAAD,CAAO/C,UAAWC,KAAE2H,aAAc/E,UAAWR,GACtCtH,KAAK,cACL4H,YAAY,kBACZK,SAAU,CAACC,GAAU0E,QAEhC,yBAAQ3H,UAAWC,KAAE4H,QAArB,4BC9BCC,GAAU,SAAChH,GAAsB,IACnC/H,EAAyE+H,EAAzE/H,QAASR,EAAgEuI,EAAhEvI,OAAQD,EAAwDwI,EAAxDxI,aAAcG,EAA0CqI,EAA1CrI,UAAWK,EAA+BgI,EAA/BhI,YAAamE,EAAkB6D,EAAlB7D,OAAQpF,EAAUiJ,EAAVjJ,OAEtE,OAAKoF,EAKD,iCACI,eAAC,GAAD,CACIpF,OAAQA,EACRkB,QAASA,EACTR,OAAQA,EACRD,aAAcA,EACdG,UAAWA,EACXK,YAAaA,KACfjB,GAAU,eAACsP,GAAD,OAZT,eAAC,KAAD,CAAU7G,GAAI,YCYhByH,GAAmB,WAC5B,IAAM9N,EAAWoG,eACZxI,EAAUmQ,eAAVnQ,OAF6B,EAGb0J,GAAeN,IAA7BhE,EAH2B,EAG3BA,OAH2B,KAGnBzD,GACW+H,GAAeH,KAAlCrI,EAJ2B,EAI3BA,QAASR,EAJkB,EAIlBA,OAWhB,OAVAL,QAAQ4E,IAAIjF,GAEZ6J,qBAAU,WACF7J,IACAoC,EAASD,GAAgBnC,IACzBoC,EAAS5B,GAAWR,OAGzB,IAGC,+BACI,eAAC,GAAD,CACIA,OAAQA,EACRoF,OAAQA,EACRlE,QAASA,EACTR,OAAQA,EACRD,aAAcA,EACdG,UAAWA,EACXK,YAAaA,O,oBCnDhBmP,GAA6B,SAACnH,GACvC,OACI,sBAAKd,UAAWC,KAAEiI,OAAlB,SAA2BpH,EAAMoH,UCDnCC,GAAc/E,GAAiB,ICQxBgF,GAAU,WAAO,IAAD,EACG7G,GAAeL,IAApCpG,EADkB,EAClBA,QAASJ,EADS,EACTA,SACTuC,EAAUsE,GAAeN,IAAzBhE,OACDhD,EAAWoG,eAGbgI,EAAkBvN,EAAQiB,KAAI,gBAAEvC,EAAF,EAAEA,GAAIuB,EAAN,EAAMA,KAAN,OAAiB,+BAAeA,GAALvB,MACzD8O,EAAkB5N,EAASqB,KAAI,gBAAEvC,EAAF,EAAEA,GAAIE,EAAN,EAAMA,QAAN,OAAoB,eAAC,IAAM4N,SAAP,UAAyB,eAAC,GAAD,CAAQY,OAAQxO,KAApBF,MAK5E,OAAKyD,EAID,uBAAK+C,UAAWC,KAAEnF,QAAlB,UACI,sBAAKkF,UAAWC,KAAEsI,aAAlB,SACKF,IAEL,uBAAKrI,UAAWC,KAAEvF,SAAlB,UACK4N,EACD,eAACE,GAAD,CAAqB9E,SAbX,SAACgE,GrCKE,IAAC1M,EqCJtBf,GrCIsBe,EqCJC0M,EAAO1M,erCI2C,CAC7ElB,KAAMe,EACNG,6BqCHW,eAAC,KAAD,CAAUsF,GAAI,YAevBkI,GAAsBhF,aAA8B,CAAC/E,KAAM,wBAArC+E,EDlCmD,SAAC1C,GAC5E,OACI,wBAAM4C,SAAU5C,EAAM2C,aAAtB,UACI,eAACV,GAAA,EAAD,CAAOF,UAAWR,GACXtH,KAAK,iBACL4H,YAAY,qBACZK,SAAU,CAACC,GAAUkF,MAE5B,+BACI,0D,oBEJHM,GAAS,WAAO,IAClB1P,EAAWwI,GAAeH,IAA1BrI,QACDkB,EAAWoG,eAFO,EAGAkB,GAAeN,IAAhCjE,EAHiB,EAGjBA,MAAOC,EAHU,EAGVA,OAMd,OACI,0BAAQ+C,UAAWC,KAAEyI,OAArB,UACI,qBAAI1I,UAAWC,KAAE0I,aAAjB,oBACA,uBAAK3I,UAAWC,KAAE2I,WAAlB,UACI,sBAAKpI,KAAY,OAAPzH,QAAO,IAAPA,OAAA,EAAAA,EAASsB,OAAOmL,QAASjF,GAAWP,UAAWC,KAAE4I,YACtDnI,IAAI,WACRzD,EACK,uBAAK+C,UAAWC,KAAE6I,oBAAlB,UAAwC9L,EAAxC,MAAiD,yBAAQgD,UAAWC,KAAE8I,cAAehJ,QAZjF,WAClB9F,E5BiFgB,uCAAM,WAAOA,GAAP,SAAAC,EAAA,sEACLlB,IADK,OAEO,IAFP,OAEbrB,KAAKwC,YACdF,EAASkD,EAAgB,KAAM,KAAM,MAAM,IAHrB,2CAAN,wD4BtE+C,wBACnD,eAAC,KAAD,CAASmD,GAAI,SAAb,0BCvBP0I,GAAK,WACd,IAAM/O,EAAWoG,eADG,EAECkB,GAAeN,IAA7BhE,EAFa,EAEbA,OAAQzD,EAFK,EAELA,GAFK,EAGM+H,GAAeH,IAAlCrI,EAHa,EAGbA,QAASR,EAHI,EAGJA,OACXV,EAAUmQ,eAAVnQ,OAWL,OAVAK,QAAQ4E,IAAIjF,EAAQ,UAEpB6J,qBAAU,WACFlI,IACAS,EAASD,GAAgBR,IACzBS,EAAS5B,GAAWmB,OAGzB,IAGC,+BACI,eAAC,GAAD,CAAS3B,OAAQA,EACRoF,OAAQA,EACRlE,QAASA,EACTR,OAAQA,EACRD,aAAcA,EACdG,UAAWA,EACXK,YAAaA,O,yCCrBrBmQ,GAA8C,SAACnI,GAAW,IAC5D3F,EAAoB2F,EAApB3F,KAAKE,EAAeyF,EAAfzF,MAAMD,EAAS0F,EAAT1F,MAElB,OACI,sBAAM4E,UAAWC,KAAE4G,KAAnB,SACI,gBAAC,KAAD,CAAS7G,UAAW,gBAAEkJ,EAAF,EAAEA,SAAF,gBAAmBjJ,KAAE4G,KAArB,YAA6BqC,EAAWjJ,KAAEC,OAAS,KAC9DI,GAAInF,EADb,UACmB,sBAAK6E,UAAWC,KAAEkJ,UAAW3I,IAAKnF,EAAOqF,IAAI,QADhE,IACyEtF,EADzE,UCTCgO,GAAS,WAAO,IAClBlO,EAAQqG,GAAeD,IAAvBpG,OACP,OACI,sBAAK8E,UAAWC,KAAEoJ,IAAlB,SACI,+BACKnO,EAAOa,KAAI,gBAAEX,EAAF,EAAEA,MAAMD,EAAR,EAAQA,KAAKE,EAAb,EAAaA,MAAb,OAAyB,eAAC,IAAMiM,SAAP,UAAiC,eAAC,GAAD,CAAelM,MAAOA,EAAOD,KAAMA,EAAME,MAAOA,KAA5DF,EAAKC,WCKlEkO,GAAM,WAAO,IACf9L,EAAe+D,GAAeJ,IAA9B3D,YAEDvD,EAAWoG,eAKjB,OAJAqB,qBAAU,WACNzH,G/BW2B,SAACA,GAChCA,EAASoD,KACJ5G,MAAK,WACFwD,EARD,CACHH,KAAM,gC+BNP,IAEE0D,EAID,qCACI,gBAAC,KAAD,WAEI,sBAAKwC,UAAU,qBAAf,SACI,sBAAKA,UAAU,YAAf,SACI,+BACI,eAAC,GAAD,UAMZ,sBAAKA,UAAU,sBAAf,SACI,sBAAKA,UAAU,YAAf,SACI,uBAAKA,UAAU,cAAf,UACI,eAAC,GAAD,IACA,sBAAKA,UAAW,cAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO7E,KAAK,IAAIqH,QAAS,eAAC,GAAD,MACzB,eAAC,KAAD,CAAOrH,KAAK,mBAAmBqH,QAAS,eAAC,GAAD,MACxC,eAAC,KAAD,CAAOrH,KAAK,aAAaqH,QAAS,eAAC,GAAD,MAClC,eAAC,KAAD,CAAOrH,KAAK,QAAQqH,QAAS,yCAC7B,eAAC,KAAD,CAAOrH,KAAK,SAASqH,QAAS,0CAC9B,eAAC,KAAD,CAAOrH,KAAK,YAAYqH,QAAS,6CACjC,eAAC,KAAD,CAAOrH,KAAK,SAASqH,QAAS,eAAC,GAAD,MAC9B,eAAC,KAAD,CAAOrH,KAAK,SAASqH,QAAS,eAAC,GAAD,MAC9B,eAAC,KAAD,CAAOrH,KAAK,IAAIqH,QAAS,0DA7B9C,eAAC,GAAD,KCjBX+G,KAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,KAAD,CAAU7K,MAAOA,GAAjB,SACI,eAAC,GAAD,QAGR8K,SAASC,eAAe,SAGhCrT,K,mBChBAF,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,cAAgB,8BAA8B,oBAAsB,oCAAoC,WAAa,2BAA2B,aAAe,+B,mBCA3PD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,4B,mBCA7GD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,UAAY,2BAA2B,aAAe,8BAA8B,QAAU,2B,mBCAlLD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,KAAO,mBAAmB,YAAc,4B,mBCAtHD,EAAOC,QAAU,CAAC,KAAO,4BAA4B,OAAS,8BAA8B,UAAY,mC,mBCAxGD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,4B","file":"static/js/main.d12c4a1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__boplF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1_ZQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3rmGo\",\"profileImgBtn\":\"ProfileInfo_profileImgBtn__1THf9\",\"contacts\":\"ProfileInfo_contacts__sn4XJ\",\"userPhoto\":\"ProfileInfo_userPhoto__3gIt4\",\"profileInform\":\"ProfileInfo_profileInform__76zXd\",\"btnEdit\":\"ProfileInfo_btnEdit__3P_5S\",\"profileLoad\":\"ProfileInfo_profileLoad__1fiQF\",\"descr\":\"ProfileInfo_descr__12BED\",\"status\":\"ProfileInfo_status__2f51D\",\"des\":\"ProfileInfo_des__2QyFo\",\"statusEdit\":\"ProfileInfo_statusEdit__Qgcwp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2tkz-\",\"error\":\"FormsControls_error__32ndD\",\"formSummaryError\":\"FormsControls_formSummaryError__I9ycH\",\"contacts\":\"FormsControls_contacts__1gP_T\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\nimport {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': \"1be3afd1-cb12-4713-953a-273c84cfad9b\"\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object')\r\n        return profileApi.getProfile(userId)\r\n    },\r\n}\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('/profile/status', {status})\r\n    },\r\n    savePhoto(photoFile: string) {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfilePropsType) {\r\n\r\n        return instance.put('profile', profile)\r\n    }\r\n}\r\nexport const authApi = {\r\n    getMe() {\r\n        return instance.get('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const getUsers2 = (currentPage: number = 1, pageSize: number = 10) => {\r\n    return instance.get(`follow?page=${currentPage}&count=${pageSize}`,).then(response => response.data)\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n","import {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\nimport {GlobalTypeAction} from \"./types/typesProfileReducer\";\r\nimport {profileApi, usersApi} from \"../api/api\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST',\r\n    newPostBody: string\r\n}\r\nexport type RouteType = {\r\n    likesCount: number\r\n    message: string\r\n    id: string\r\n}\r\nexport type ProfileType = {\r\n    posts: Array<RouteType>\r\n    newPostText: string,\r\n    profile: null | any\r\n    status: string\r\n}\r\nexport type DispatchType = (action: GlobalTypeAction) => void\r\n\r\nlet initialState: ProfileType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi,how are you', likesCount: 0},\r\n        {id: v1(), message: 'Hi, you', likesCount: 0},\r\n        {id: v1(), message: 'Hi,how are you', likesCount: 1},\r\n        {id: v1(), message: 'how are you', likesCount: 0}\r\n    ],\r\n    newPostText: 'it-kamas',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfileType = initialState, action: GlobalTypeAction): ProfileType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: v1(),\r\n                    message: action.newPostBody,\r\n                    likesCount: 0,\r\n                }],\r\n                newPostText: ''\r\n            }\r\n        case \"SET-USER-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.payload.status\r\n            }\r\n        case \"DELETE-POST\":\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id !== action.payload.postId)\r\n            }\r\n        case \"SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n        case \"UPDATE-LIKES-COUNTER\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => el.id === action.payload.id ? {\r\n                    ...el,\r\n                    likesCount: action.payload.likesCounter\r\n                } : el)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostAC = (newPostBody: string): AddPostActionType => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        newPostBody\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfilePropsType) => {\r\n    return {\r\n        type: 'SET-USER-PROFILE',\r\n        profile,\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET-STATUS',\r\n        payload: {\r\n            status\r\n        }\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: string) => {\r\n    return {\r\n        type: 'DELETE-POST',\r\n        payload: {\r\n            postId\r\n        }\r\n    } as const\r\n}\r\nexport const savePhotoSuccess = (photos: any) => {\r\n    return {\r\n        type: 'SAVE-PHOTO-SUCCESS',\r\n        photos\r\n    } as const\r\n}\r\nexport const updateLikesCounter = (id: string, likesCounter: number) => {\r\n    return {\r\n        type: 'UPDATE-LIKES-COUNTER',\r\n        payload: {\r\n            id, likesCounter\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: DispatchType) => {\r\n    let response = await usersApi.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: DispatchType) => {\r\n    let response = await profileApi.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: DispatchType) => {\r\n    let response = await profileApi.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: any) => async (dispatch: DispatchType) => {\r\n    let response = await profileApi.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfilePropsType) => async (dispatch: DispatchType, getState: () => AppStateType) => {\r\n    const userId = getState().auth.id\r\n    let response = await profileApi.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        //@ts-ignore\r\n        dispatch(getUserProfile(userId))\r\n    } else {\r\n        // @ts-ignore\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}));\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\n","import {navBarACType} from \"./navbar-reducer\";\r\nimport {AddPostActionType,} from \"./profile-reducer\";\r\n\r\n\r\nexport type UpdateNewMessageBodyActionType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\nexport type SendMessageActionType = {\r\n    type: \"SEND-MESSAGE\",\r\n    newMessageBody: string\r\n\r\n}\r\ntype DialogType = {\r\n    message: string\r\n    id: number\r\n}\r\ntype PostsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type GlobalReducerType =\r\n    AddPostActionType\r\n    | SendMessageActionType\r\n    | navBarACType\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageActionType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n\r\n})\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<PostsType>\r\n    messages: Array<DialogType>\r\n    newMessageBody: string\r\n\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Slava'},\r\n        {id: 2, name: 'Borya'},\r\n        {id: 3, name: 'Igor'},\r\n        {id: 4, name: 'Viktor'}],\r\n    messages: [\r\n        {id: 1, message: 'Hi Kaktus'},\r\n        {id: 2, message: 'Hi klaus'},\r\n        {id: 3, message: 'Hi Valeron'},\r\n        {id: 4, message: 'Hi hello'},\r\n        {id: 5, message: 'Hi you'}\r\n    ],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: GlobalReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 5, message: body}],\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/message.12d18ecd.svg\";","export default __webpack_public_path__ + \"static/media/user.31fa5e24.svg\";","export default __webpack_public_path__ + \"static/media/news.b487f0cb.svg\";","export default __webpack_public_path__ + \"static/media/settings.647468af.svg\";","export default __webpack_public_path__ + \"static/media/music.c6291929.svg\";","export default __webpack_public_path__ + \"static/media/USERS.45762d61.svg\";","import message from '../assets/images/message.svg'\r\nimport user from '../assets/images/user.svg'\r\nimport news from '../assets/images/news.svg'\r\nimport settings from '../assets/images/settings.svg'\r\nimport music from '../assets/images/music.svg'\r\nimport users from '../assets/images/USERS.svg'\r\nimport {GlobalReducerType} from \"./dialogs-reducer\";\r\nexport type navBarACType={\r\n    type:'NAV-BAR'\r\n}\r\nexport type NavbarRoutesType={\r\n    path:string\r\n    title:string\r\n    image:string\r\n}\r\nexport type NavBarType = {\r\n    routes:Array<NavbarRoutesType>\r\n}\r\nconst NAV_BAR='NAV-BAR'\r\nexport const navBarAC=():navBarACType=>({\r\n    type:NAV_BAR\r\n})\r\n\r\nlet initialState:NavBarType = {\r\n    routes: [\r\n        {path: '/', title: 'Profile',image:user},\r\n        {path: '/dialogs', title: 'Message',image:message},\r\n        {path: '/news', title: 'News',image:news},\r\n        {path: '/music', title: 'Music',image:music},\r\n        {path: '/settings', title: 'Settings',image:settings},\r\n        {path: '/users', title: 'Users',image:users},\r\n    ]\r\n}\r\n\r\nexport const navbarReducer = (state: NavBarType = initialState, action: GlobalReducerType):NavBarType => {\r\n    switch (action.type) {\r\n        case NAV_BAR:\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import { UserType} from \"../redux/users-reducer\";\r\n\r\n\r\nexport let updateObjectInArray = (items:Array<UserType>,itemId:number,newObjProps:any) => items.map(u => u.id === itemId ? {...u, ...newObjProps} : u)","import {GlobalReducerType} from \"./types/typesUserReducers\";\r\nimport {usersApi} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n\r\n}\r\nexport type DispatchType = (action: GlobalReducerType) => void\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\nexport const usersReducer = (state: UsersType = initialState, action: GlobalReducerType): UsersType => {\r\n    switch (action.type) {\r\n        case 'users/FOLLOW':\r\n            return {...state, users: updateObjectInArray(state.users,action.payload.userId, {followed: true})\r\n            }\r\n        case \"users/UNFOLLOW\":\r\n            return {...state, users: updateObjectInArray(state.users,action.payload.userId, {followed: false})\r\n                }\r\n        case \"users/SET-USER\":\r\n            return {...state, users: action.payload.users}\r\n        case \"users/SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.payload.currentPage}\r\n        case \"users/SET-USERS-TOTAL-COUNT\":\r\n            return {...state, totalUsersCount: action.payload.totalCount}\r\n        case \"users/TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.payload.isFetching}\r\n        case \"users/TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.isFetching\r\n                    ? [...state.followingInProgress, action.payload.userId]\r\n                    : state.followingInProgress.filter(id => id != action.payload.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: 'users/FOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: 'users/UNFOLLOW',\r\n        payload: {\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'users/SET-USER',\r\n        payload: {\r\n            users\r\n        }\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: 'users/SET-CURRENT-PAGE',\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport const setUsersTotalCountAC = (totalCount: number) => {\r\n    return {\r\n        type: 'users/SET-USERS-TOTAL-COUNT',\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\r\n    return {\r\n        type: 'users/TOGGLE-IS-FETCHING',\r\n        payload: {isFetching}\r\n    } as const\r\n}\r\nexport const toggleIsFollowingInProgressAC = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: 'users/TOGGLE-IS-FOLLOWING-PROGRESS',\r\n        payload: {\r\n            isFetching,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => async (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetchingAC(true))\r\n    dispatch(setCurrentPageAC(currentPage))\r\n    let data = await usersApi.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetchingAC(false))\r\n    dispatch(setUsersAC(data.items))\r\n    dispatch(setUsersTotalCountAC(data.totalCount))\r\n}\r\nconst followUnfollowFlow = async (dispatch:DispatchType,userId:number,apiMethod:any,actionCreator:any) => {\r\n    dispatch(toggleIsFollowingInProgressAC(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        console.log('if')\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingInProgressAC(false, userId))\r\n}\r\n\r\n//Thunks\r\n\r\nexport const follow = (userId: number) => async (dispatch: DispatchType) => {\r\n    followUnfollowFlow(dispatch,userId,usersApi.follow.bind(usersApi),followSuccess)\r\n\r\n}\r\nexport const unfollow = (userId: number) =>\r\n    async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch,userId,usersApi.unfollow.bind(usersApi),unfollowSuccess)\r\n    }\r\n\r\n","import {authApi, securityAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\n\r\nexport type GeneralType = SetUserDataType | GetCaptchaUrlType\r\ntype SetUserDataType = ReturnType<typeof setAuthUserData>\r\ntype GetCaptchaUrlType = ReturnType<typeof getCaptchaUrlSuccess>\r\nexport const authReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-USER-DATA\":\r\n        case \"GET-CAPTCHA-URL\": {\r\n            return {...state, ...action.payload}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n///////////////////Actions//////////////////////////\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean,) => {\r\n    return {\r\n        type: 'auth/SET-USER-DATA',\r\n        payload: {\r\n            id, email, login, isAuth,\r\n        }\r\n    } as const\r\n}\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) => {\r\n    return {\r\n        type: 'GET-CAPTCHA-URL',\r\n        payload: {captchaUrl}\r\n    } as const\r\n}\r\n\r\n/////////////////Thunks//////////////////////////////\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authApi.getMe()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, FormAction>) => {\r\n        try {\r\n            const response = await authApi.login(email, password, rememberMe, captcha);\r\n            if (response.data.resultCode === 0) {\r\n                await dispatch(getAuthUserData());\r\n            } else {\r\n                if (response.data.resultCode === 10) {\r\n                    await dispatch(getCaptchaUrl());\r\n                } else {\r\n                    const message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error. Please reload page\";\r\n                    dispatch(stopSubmit(\"login\", {_error: message}));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error login. ${error}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, GeneralType>) => {\r\n        try {\r\n            const response = await securityAPI.getCaptchaUrl();\r\n            const captchaUrl = response.data.url;\r\n            dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n        } catch (error) {\r\n            console.log(`Error getting captcha image url. ${error}`);\r\n        }\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    let response = await authApi.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED-SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type GeneralType = SetUserDataType\r\ntype SetUserDataType = ReturnType<typeof initializeSuccess>\r\nexport const initializeSuccess = () => {\r\n    return {\r\n        type: 'INITIALIZED-SUCCESS',\r\n\r\n    }\r\n}\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(initializeSuccess())\r\n        })\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {navbarReducer} from \"./navbar-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    navbar: navbarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunkMiddleware))","import React, {useState} from 'react';\r\nimport s from \"./Paginator.module.css\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?:number\r\n}\r\n\r\nexport const Paginator = ({totalUsersCount, pageSize, currentPage, onPageChanged,portionSize = 10,}: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div>\r\n        {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span\r\n                    className={currentPage === p ? s.active : ''}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/risuem-chelovek-rebenku-14.e9b2c5f4.jpg\";","import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\nimport {follow, unfollow, UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype UsersPropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const User = ({user, followingInProgress,}: UsersPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const onHandlerFollow = (id: number) => {\r\n        dispatch(follow(id))\r\n    }\r\n    const onHandlerUnFollow = (id: number) => {\r\n        dispatch(unfollow(id))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>\r\n                <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img className={s.userPhoto} src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                         alt='avatar'/>\r\n                </NavLink>\r\n                </div>\r\n                <div>\r\n            {\r\n                user.followed\r\n                    ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  onHandlerUnFollow(user.id)\r\n                              }}>Unfollow</button>\r\n                    : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  onHandlerFollow(user.id)\r\n                              }}>Follow</button>\r\n            }\r\n                </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const Users = ({onPageChanged, users, totalUsersCount, pageSize, currentPage, ...props}: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator onPageChanged={onPageChanged} totalUsersCount={totalUsersCount} pageSize={pageSize}\r\n                       currentPage={currentPage}/>\r\n            <div>\r\n                {users.map(u =>\r\n                    <User key={u.id} user={u} followingInProgress={props.followingInProgress}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.8c009b4e.svg\";","import s from \"../../Users/users.module.css\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader=()=>{\r\n    return(\r\n        <img className={s.preloader} src={preloader}/>\r\n    )\r\n}","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\nexport const selectIsAuth = (state: AppStateType) => state.auth\r\nexport const selectIsDialogs = (state: AppStateType) => state.dialogsPage\r\nexport const selectIsApp = (state: AppStateType) => state.app\r\nexport const selectIsProfile = (state: AppStateType) => state.profilePage\r\nexport const selectUser= (state: AppStateType) => state.usersPage\r\nexport const selectNavbar= (state: AppStateType) => state.navbar\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector","import {useDispatch} from \"react-redux\";\r\nimport {follow, getUsersTC, unfollow} from \"../../redux/users-reducer\";\r\nimport React, {useEffect} from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {selectUser} from \"../../redux/selectors/users-selectors\";\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\n\r\n\r\nexport const UsersAPIComponent =()=> {\r\n    const dispatch = useDispatch()\r\n    const {currentPage, pageSize,isFetching,totalUsersCount,users,followingInProgress} = useAppSelector(selectUser)\r\n    useEffect(()=>{\r\n        dispatch(getUsersTC(currentPage, pageSize))\r\n    },[])\r\n\r\n   const onPageChanged = (pageNumber: number) => {\r\n       dispatch(getUsersTC(pageNumber, pageSize))\r\n    }\r\n\r\n        return <div>\r\n            <>\r\n                {isFetching && <Preloader/>}\r\n                <Users totalUsersCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n                       currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       users={users}\r\n                       unfollow={unfollow}\r\n                       follow={follow}\r\n                       followingInProgress={followingInProgress}\r\n                />\r\n            </>\r\n        </div>\r\n    // }\r\n}\r\n//\r\n// export const mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n//     return {\r\n//         users: getUsers(state),\r\n//         pageSize: getPageSize(state),\r\n//         totalUsersCount: getTotalUsersCount(state),\r\n//         currentPage: getCurrentPage(state),\r\n//         isFetching: getIsFetching(state),\r\n//         followingInProgress: getFollowingInProgress(state),\r\n//     }\r\n// }\r\n//\r\n// export default connect(mapStateToProps, {\r\n//     follow,\r\n//     unfollow,\r\n//     setCurrentPageAC,\r\n//     toggleIsFollowingInProgressAC,\r\n//     getUsersTC\r\n// })(UsersAPIComponent)","import styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FC} from \"react\";\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nconst FormControl = ({input,meta:{touched,error},children}:any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,element,...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n}\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,element,...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export const required = (value:string) =>\r\n    value ? undefined : 'Field is required'\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:string) =>\r\n    value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControl/FormsControl\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControl/FormsControls.module.css\"\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\nimport {selectIsAuth} from \"../../redux/selectors/users-selectors\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                                       handleSubmit,\r\n                                                                                                                       error,\r\n                                                                                                                       captchaUrl\r\n                                                                                                                   }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const {captchaUrl, isAuth} = useAppSelector(selectIsAuth)\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    const activateEditMode = () => setEditMode(false)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(true)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    useEffect(() => {\r\n        setStatus(status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <div>\r\n                   <span className={s.status}>Status: </span> <span className={s.statusEdit} onDoubleClick={activateEditMode}>{status || '-------'} <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" version=\"1.1\" viewBox=\"0 0 16 16\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 10l2-1 7-7-1-1-7 7-1 2zM4.52 13.548c-0.494-1.043-1.026-1.574-2.069-2.069l1.548-4.262 2-1.217 6-6h-3l-6 6-3 10 10-3 6-6v-3l-6 6-1.217 2z\"></path></svg></span>\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {FC} from \"react\";\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport s from '../../common/FormsControl/FormsControls.module.css'\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype PropsType = {\r\n    profile: ProfilePropsType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfilePropsType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (\r\n    {handleSubmit, profile, error}) => {\r\n    return (\r\n        <div >\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <button>save</button>\r\n                </div>\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>Full name</b>: {(createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input))}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a\r\n                        job</b>{createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>My professional skills</b>:\r\n                    {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    <b>About me</b>:\r\n                    {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>: {Object.keys(profile?.contacts).map(key => {\r\n                    return <div className={s.contacts}>\r\n                        <div key={key}>\r\n                            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfilePropsType, PropsType>({form: 'edit-profile'})(ProfileDataForm)","import s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from './ProfileStatus'\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport userPhoto from \"../../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfilePropsType) => Promise<any>\r\n    userId: string | undefined\r\n}\r\nexport const ProfileInfo = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const {profile, updateStatus, status, savePhoto, saveProfile, userId} = props\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files && e.currentTarget.files.length) {\r\n            dispatch(savePhoto(e.currentTarget.files[0]))\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfilePropsType) => {\r\n        dispatch(saveProfile(formData))\r\n        setEditMode(false)\r\n    }\r\n    const onHandlerEdit = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    console.log()\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <div className={s.profileImgBtn}>\r\n                    <img src={profile.photos.large || userPhoto} className={s.userPhoto}\r\n                         alt='avatar'/>\r\n                    {!userId && <button className={s.btnEdit} onClick={onHandlerEdit}>Edit</button>}\r\n\r\n                    <label className={s.profileLoad}> Load avatar\r\n                        <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                    </label>\r\n\r\n                </div>\r\n                <div className={s.contacts}>\r\n                    <h4 className={s.profileInform}>User Information</h4>\r\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                    <div >{editMode ?\r\n                        <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\r\n                        <ProfileData profile={profile} goToEditMode={goToEditMode}/>}</div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactsType) => {\r\n    return <div ><span className={s.des}>{contactTitle}</span>  {contactValue}</div>\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: any) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div><span className={s.descr}>Full name</span> {profile.fullName}</div>\r\n        <div><span className={s.descr}>Looking for a job</span> {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        {profile.lookingForAJob &&\r\n            <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n        <div><span className={s.descr}>About me</span> {profile.aboutMe}</div>\r\n        <div><span className={s.descr}>Contacts: </span> {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key}>\r\n                {\r\n                    profile.contacts[key] !== null\r\n                    && <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                }\r\n            </div>\r\n        })}</div>\r\n    </div>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user-profile-svgrepo-com (1).97ad7b1e.svg\";","export default __webpack_public_path__ + \"static/media/like.9895b6a3.svg\";","export default __webpack_public_path__ + \"static/media/like-red.d7f1e57c.svg\";","import s from \"./Post.module.css\";\r\nimport React, {FC, useState} from \"react\";\r\nimport userPost from '../../../../assets/images/user-profile-svgrepo-com (1).svg'\r\nimport like from '../../../../assets/images/like.svg'\r\nimport likeRed from '../../../../assets/images/like-red.svg'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateLikesCounter} from \"../../../../redux/profile-reducer\";\r\n\r\ntype PostPropsType = {\r\n    message: string | undefined\r\n    likesCount: number\r\n    id:string\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = (props) => {\r\n    const {message, likesCount,id} = props\r\n    const dispatch=useDispatch()\r\n    const onHandlerLike = () => {\r\n        dispatch(updateLikesCounter(id, likesCount+1))\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <div className={s.postImgMess}>\r\n                    <img src={userPost} alt={'logo'}/>\r\n                    <span>{message}</span>\r\n                </div>\r\n                <div className={s.postLike}>\r\n                    <span>\r\n                        {likesCount > 0\r\n                            ? <img onClick={onHandlerLike} className={s.like} src={likeRed} alt=\"like\"/>\r\n                            : <img onClick={onHandlerLike} className={s.like} src={like} alt=\"like\"/>}\r\n                        {likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\r\nimport {selectIsProfile} from \"../../../redux/selectors/users-selectors\";\r\nimport {addPostAC, updateLikesCounter} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype AddNewPostFormType = {\r\n    newPostBody: string\r\n}\r\nexport const MyPosts = React.memo(() => {\r\n        const dispatch = useDispatch()\r\n        const {posts} = useAppSelector(selectIsProfile)\r\n\r\n        let post = posts.map(({id, message, likesCount}) => (\r\n            <React.Fragment>\r\n                <Post key={id} message={message} likesCount={likesCount} id={id}/>\r\n            </React.Fragment>))\r\n        let onAddPost = (values: AddNewPostFormType) => {\r\n            dispatch(addPostAC(values.newPostBody))\r\n        }\r\n        return (\r\n            <div className={s.myposts}>\r\n                <h3 className={s.postTitle}>My Posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {post}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field className={s.postTextarea} component={Textarea}\r\n                       name='newPostBody'\r\n                       placeholder='Enter your post'\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <button className={s.btnPost}>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'myPostAddPostForm'})(AddNewPostForm)","import React from \"react\";\r\n\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\n\r\ntype propsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: any\r\n    isAuth: boolean\r\n    userId: string | undefined\r\n}\r\n\r\nexport const Profile = (props: propsType) => {\r\n    const {profile, status, updateStatus, savePhoto, saveProfile, isAuth, userId} = props\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                userId={userId}\r\n                profile={profile}\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}/>\r\n            {!userId && <MyPosts/>}\r\n        </div>\r\n    )\r\n}\r\n","import React, {ComponentType, useEffect, useState} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {NavigateFunction, Params, useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectIsProfile} from \"../../redux/selectors/users-selectors\";\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const ProfileContainer = () => {\r\n    const dispatch = useDispatch()\r\n    let {userId} = useParams()\r\n    const {isAuth, id} = useAppSelector(selectIsAuth)\r\n    const {profile, status} = useAppSelector(selectIsProfile)\r\n    console.log(userId)\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getUserProfile(+userId))\r\n            dispatch(getStatus(+userId))\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Profile\r\n                userId={userId}\r\n                isAuth={isAuth}\r\n                profile={profile}\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n//\r\n//\r\n// let mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n//     profile: state.profilePage.profile,\r\n//     status: state.profilePage.status,\r\n//     authorizedUserId: state.auth.id,\r\n//     isAuth: state.auth.isAuth\r\n//\r\n// })\r\n//\r\n// export function withRouter<T>(Component: ComponentType<T>): ComponentType<T & WithRouterType> {\r\n//\r\n//     const ComponentWithRouterProp = (props: T & WithRouterType) => {\r\n//         console.log(\"ComponentWithRouterProp\")\r\n//         let location = useLocation();\r\n//         let navigate = useNavigate();\r\n//         let params = useParams();\r\n//         return (\r\n//             <Component {...props} router={{location, navigate, params}}\r\n//             />\r\n//         );\r\n//     }\r\n//     return ComponentWithRouterProp;\r\n// }\r\n//\r\n// type WithRouterType = Location & NavigateFunction & Readonly<Params<string>>;\r\n//\r\n// // @ts-ignore\r\n// export default compose<React.ComponentType>(connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {\r\n//         getUserProfile, getStatus, updateStatus, savePhoto, saveProfile\r\n//     }), withRouter,\r\n//     // withAuthRedirect\r\n// )(ProfileContainer)","import s from \"../Dialogs.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype StyledDialogProps={\r\n    dialog:string\r\n}\r\nexport const Dialog:FC<StyledDialogProps>=(props)=>{\r\n    return (\r\n        <div className={s.dialog}>{props.dialog}</div>\r\n    )\r\n}","import React from 'react';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\nimport {AddMessageFormType} from \"../Dialogs\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name='newMessageBody'\r\n                   placeholder='Enter your message'\r\n                   validate={[required, maxLength50]}/>\r\n\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectIsDialogs} from \"../../redux/selectors/users-selectors\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs = () => {\r\n    const {dialogs, messages} = useAppSelector(selectIsDialogs)\r\n    const {isAuth} = useAppSelector(selectIsAuth)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    let dialogsElements = dialogs.map(({id, name}) => (<div key={id}>{name}</div>))\r\n    let messageElements = messages.map(({id, message}) => (<React.Fragment key={id}><Dialog dialog={message}/></React.Fragment>))\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        dispatch(sendMessageAC(values.newMessageBody))\r\n    }\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InitialStateType, logoutTC} from \"../../redux/auth-reducer\";\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectIsProfile} from \"../../redux/selectors/users-selectors\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport userPhoto from \"../../assets/images/risuem-chelovek-rebenku-14.jpg\";\r\n\r\ntype HeaderPropsType = {\r\n    auth: InitialStateType\r\n    logoutTC: () => void\r\n}\r\n\r\nexport const Header = () => {\r\n    const {profile} = useAppSelector(selectIsProfile)\r\n    const dispatch = useDispatch()\r\n    const {login, isAuth} = useAppSelector(selectIsAuth)\r\n    const onClickLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <h1 className={s.header_title}>Social</h1>\r\n            <div className={s.loginBlock}>\r\n                <img src={profile?.photos.large || userPhoto} className={s.headerPhoto}\r\n                     alt='avatar'/>\r\n                {isAuth\r\n                    ? <div className={s.header_name_profile}>{login} - <button className={s.button_header} onClick={onClickLogout}>Log out</button></div> :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectIsProfile} from \"../../redux/selectors/users-selectors\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const Me = () => {\r\n    const dispatch = useDispatch()\r\n    const {isAuth, id} = useAppSelector(selectIsAuth)\r\n    const {profile, status} = useAppSelector(selectIsProfile)\r\n    let {userId} = useParams()\r\n    console.log(userId, 'userId')\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getUserProfile(+id))\r\n            dispatch(getStatus(+id))\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Profile userId={userId}\r\n                     isAuth={isAuth}\r\n                     profile={profile}\r\n                     status={status}\r\n                     updateStatus={updateStatus}\r\n                     savePhoto={savePhoto}\r\n                     saveProfile={saveProfile}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import s from './StyledNavLink.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype StyledNavLinkProps = {\r\n    title: string\r\n    path: string\r\n    image:any\r\n}\r\n\r\nexport const StyledNavLink: React.FC<StyledNavLinkProps> = (props) => {\r\n    const {path,image,title} = props\r\n\r\n    return (\r\n        <div  className={s.item}>\r\n            <NavLink className={({isActive}) => `${s.item} ${isActive ? s.active : ''}`}\r\n                     to={path}><img className={s.routesImg} src={image} alt=\"img\"/> {title} </NavLink>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {StyledNavLink} from \"./StyledNavLink/StyledNavLink\";\r\nimport {useAppSelector} from \"../common/hook/selectorHook\";\r\nimport {selectNavbar} from \"../../redux/selectors/users-selectors\";\r\n\r\nexport const Navbar = () => {\r\n    const {routes}=useAppSelector(selectNavbar)\r\n    return (\r\n        <div className={s.nav}>\r\n            <nav >\r\n                {routes.map(({title,path,image}) => (<React.Fragment key={path+title}><StyledNavLink title={title} path={path} image={image}/></React.Fragment>))}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Routes} from \"react-router-dom\";\r\nimport {UsersAPIComponent} from \"./components/Users/UsersContainer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {Preloader} from \"./components/common/preloader/Preloader\";\r\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\r\nimport {Dialogs} from \"./components/Dialogs/Dialogs\";\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {useAppSelector} from \"./components/common/hook/selectorHook\";\r\nimport {selectIsApp} from \"./redux/selectors/users-selectors\";\r\nimport {Me} from \"./components/Me/Me\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\n\r\nexport const App = () => {\r\n    const {initialized} = useAppSelector(selectIsApp)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    if (!initialized) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <>\r\n            <HashRouter>\r\n\r\n                <div className='app-wrapper-header'>\r\n                    <div className=\"container\">\r\n                        <div>\r\n                            <Header/>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className='app-wrapper-content'>\r\n                    <div className=\"container\">\r\n                        <div className=\"app-content\">\r\n                            <Navbar/>\r\n                            <div className={'app_profile'}>\r\n                                <Routes>\r\n                                    <Route path='/' element={<Me/>}/>\r\n                                    <Route path='/profile/:userId' element={<ProfileContainer/>}/>\r\n                                    <Route path='/dialogs/*' element={<Dialogs/>}/>\r\n                                    <Route path='/news' element={<h2>News</h2>}/>\r\n                                    <Route path='/music' element={<h2>Music</h2>}/>\r\n                                    <Route path='/settings' element={<h2>Settings</h2>}/>\r\n                                    <Route path='/users' element={<UsersAPIComponent/>}/>\r\n                                    <Route path='/login' element={<Login/>}/>\r\n                                    <Route path='*' element={<div>404</div>}/>\r\n                                </Routes>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </HashRouter>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from'./redux/redux-store'\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport {App} from \"./App\";\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3c_Tr\",\"headerPhoto\":\"Header_headerPhoto__1_xWe\",\"button_header\":\"Header_button_header__2sojS\",\"header_name_profile\":\"Header_header_name_profile__uYz-S\",\"loginBlock\":\"Header_loginBlock__1pyM0\",\"header_title\":\"Header_header_title__i7FYP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I_CAQ\",\"dialogsItems\":\"Dialogs_dialogsItems__1VEp2\",\"messages\":\"Dialogs_messages__3SXIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myposts\":\"MyPosts_myposts__2twgh\",\"posts\":\"MyPosts_posts__2G5MT\",\"postTitle\":\"MyPosts_postTitle__3crZ8\",\"postTextarea\":\"MyPosts_postTextarea__TwDnM\",\"btnPost\":\"MyPosts_btnPost__1v2PL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14JiU\",\"postLike\":\"Post_postLike__359ee\",\"like\":\"Post_like__24bn9\",\"postImgMess\":\"Post_postImgMess__5cmVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StyledNavLink_item__3V37q\",\"active\":\"StyledNavLink_active__2aPHU\",\"routesImg\":\"StyledNavLink_routesImg__1Xqa4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__bL0S7\",\"preloader\":\"users_preloader__Xn2Vp\"};"],"sourceRoot":""}